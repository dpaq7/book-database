{"mappings":"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","sources":["<anon>","src/main.js","src/api.js","src/ui.js","src/book-service.js","src/challenge-service.js","src/import-export.js"],"sourcesContent":["// API Service for handling API requests\nconst $96e14f2a7c3555e4$export$d0204b1ddc8ee140 = {\n    // Base URL for API requests\n    baseUrl: 'https://book-database-backend.onrender.com/api',\n    // Initialize the API service\n    init () {},\n    // Generic GET request\n    async get (endpoint) {\n        try {\n            const response = await fetch(`${this.baseUrl}/${endpoint}`);\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error('API GET Error:', error);\n            throw error;\n        }\n    },\n    // Generic POST request\n    async post (endpoint, data) {\n        try {\n            const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error('API POST Error:', error);\n            throw error;\n        }\n    },\n    // Generic PUT request\n    async put (endpoint, data) {\n        try {\n            const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error('API PUT Error:', error);\n            throw error;\n        }\n    },\n    // Generic DELETE request\n    async delete (endpoint) {\n        try {\n            const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n                method: 'DELETE'\n            });\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error('API DELETE Error:', error);\n            throw error;\n        }\n    },\n    // File upload with FormData\n    async uploadFile (endpoint, file, fileType) {\n        try {\n            const formData = new FormData();\n            formData.append('file', file);\n            const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n                method: 'POST',\n                body: formData\n            });\n            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n            return await response.json();\n        } catch (error) {\n            console.error('API Upload Error:', error);\n            throw error;\n        }\n    },\n    // Book-specific API methods\n    // Get all books\n    async getBooks () {\n        return this.get('books');\n    },\n    // Get a single book\n    async getBook (id) {\n        return this.get(`books/${id}`);\n    },\n    // Create a new book\n    async createBook (book) {\n        return this.post('books', book);\n    },\n    // Update a book\n    async updateBook (id, book) {\n        return this.put(`books/${id}`, book);\n    },\n    // Delete a book\n    async deleteBook (id) {\n        return this.delete(`books/${id}`);\n    },\n    // Update reading progress\n    async updateReadingProgress (id, progress) {\n        return this.put(`books/${id}/progress`, progress);\n    },\n    // Reading Challenge API methods\n    // Get all challenges\n    async getChallenges () {\n        return this.get('challenges');\n    },\n    // Create a new challenge\n    async createChallenge (challenge) {\n        return this.post('challenges', challenge);\n    },\n    // Update a challenge\n    async updateChallenge (year, challenge) {\n        return this.put(`challenges/${year}`, challenge);\n    },\n    // Import/Export API methods\n    // Import books from JSON\n    async importJson (file) {\n        return this.uploadFile('import/json', file);\n    },\n    // Import books from CSV\n    async importCsv (file) {\n        return this.uploadFile('import/csv', file);\n    },\n    // Export books to JSON\n    async exportJson () {\n        return this.get('export/json');\n    }\n};\n\n\n// UI Service for handling UI-related operations\nconst $84923368ea4a1ab4$export$4e73d36b0bd075d1 = {\n    // Bootstrap modal instances\n    bookModal: null,\n    progressModal: null,\n    challengeModal: null,\n    // Initialize the UI service\n    init () {\n        // Initialize Bootstrap modals\n        this.bookModal = new bootstrap.Modal(document.getElementById('book-modal'));\n        this.progressModal = new bootstrap.Modal(document.getElementById('progress-modal'));\n        this.challengeModal = new bootstrap.Modal(document.getElementById('challenge-modal'));\n    },\n    // Show book modal for adding/editing a book\n    showBookModal (book = null) {\n        const modalTitle = document.getElementById('book-modal-label');\n        const bookForm = document.getElementById('book-form');\n        // Reset form\n        bookForm.reset();\n        if (book) {\n            // Edit existing book\n            modalTitle.textContent = 'Edit Book';\n            // Fill form with book data\n            document.getElementById('book-id').value = book.bookId;\n            document.getElementById('title').value = book.title || '';\n            document.getElementById('author').value = book.author || '';\n            document.getElementById('additional-authors').value = book.additionalAuthors || '';\n            document.getElementById('isbn').value = book.isbn || '';\n            document.getElementById('isbn13').value = book.isbn13 || '';\n            document.getElementById('publisher').value = book.publisher || '';\n            document.getElementById('binding').value = book.binding || '';\n            document.getElementById('pages').value = book.pages || '';\n            document.getElementById('published').value = book.published || '';\n            document.getElementById('edition-published').value = book.editionPublished || '';\n            document.getElementById('exclusive-shelf').value = book.exclusiveShelf || 'to-read';\n            document.getElementById('bookshelves').value = book.bookshelves || '';\n            document.getElementById('rating').value = book.rating || '';\n            document.getElementById('my-review').value = book.myReview || '';\n        } else {\n            // Add new book\n            modalTitle.textContent = 'Add New Book';\n            document.getElementById('book-id').value = '';\n        }\n        this.bookModal.show();\n    },\n    // Show reading progress modal\n    showProgressModal (book) {\n        const bookTitle = document.getElementById('book-title');\n        const totalPages = document.getElementById('total-pages');\n        const currentPage = document.getElementById('current-page');\n        const percentComplete = document.getElementById('percent-complete');\n        const progressBookId = document.getElementById('progress-book-id');\n        // Reset form\n        document.getElementById('progress-form').reset();\n        // Fill form with book data\n        bookTitle.value = book.title;\n        totalPages.value = book.pages || 0;\n        // Set current progress\n        if (book.readingProgress) {\n            currentPage.value = book.readingProgress.currentPage || 0;\n            percentComplete.value = book.readingProgress.percentComplete || 0;\n            document.getElementById('percent-display').textContent = `${book.readingProgress.percentComplete || 0}%`;\n        } else {\n            currentPage.value = 0;\n            percentComplete.value = 0;\n            document.getElementById('percent-display').textContent = '0%';\n        }\n        // Set max value for current page\n        currentPage.max = book.pages || 100;\n        // Set book ID\n        progressBookId.value = book.bookId;\n        this.progressModal.show();\n    },\n    // Show challenge modal\n    showChallengeModal (challenge = null) {\n        const modalTitle = document.getElementById('challenge-modal-label');\n        const challengeForm = document.getElementById('challenge-form');\n        // Reset form\n        challengeForm.reset();\n        if (challenge) {\n            // Edit existing challenge\n            modalTitle.textContent = 'Edit Reading Challenge';\n            // Fill form with challenge data\n            document.getElementById('challenge-year').value = challenge.year;\n            document.getElementById('challenge-goal').value = challenge.goal;\n            // Disable year field for existing challenges\n            document.getElementById('challenge-year').disabled = true;\n        } else {\n            // Add new challenge\n            modalTitle.textContent = 'New Reading Challenge';\n            // Set default year to current year\n            const currentYear = new Date().getFullYear();\n            document.getElementById('challenge-year').value = currentYear;\n            // Enable year field for new challenges\n            document.getElementById('challenge-year').disabled = false;\n        }\n        this.challengeModal.show();\n    },\n    // Update percent complete from current page\n    updatePercentFromPage () {\n        const currentPage = document.getElementById('current-page');\n        const totalPages = document.getElementById('total-pages');\n        const percentComplete = document.getElementById('percent-complete');\n        const percentDisplay = document.getElementById('percent-display');\n        if (totalPages.value > 0) {\n            const percent = Math.round(currentPage.value / totalPages.value * 100);\n            percentComplete.value = percent;\n            percentDisplay.textContent = `${percent}%`;\n        }\n    },\n    // Update current page from percent complete\n    updatePageFromPercent () {\n        const currentPage = document.getElementById('current-page');\n        const totalPages = document.getElementById('total-pages');\n        const percentComplete = document.getElementById('percent-complete');\n        const percentDisplay = document.getElementById('percent-display');\n        if (totalPages.value > 0) {\n            const page = Math.round(percentComplete.value / 100 * totalPages.value);\n            currentPage.value = page;\n            percentDisplay.textContent = `${percentComplete.value}%`;\n        }\n    },\n    // Show toast notification\n    showToast (message, type = 'success') {\n        // Create toast container if it doesn't exist\n        let toastContainer = document.querySelector('.toast-container');\n        if (!toastContainer) {\n            toastContainer = document.createElement('div');\n            toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';\n            document.body.appendChild(toastContainer);\n        }\n        // Create toast element\n        const toastEl = document.createElement('div');\n        toastEl.className = `toast align-items-center text-white bg-${type} border-0`;\n        toastEl.setAttribute('role', 'alert');\n        toastEl.setAttribute('aria-live', 'assertive');\n        toastEl.setAttribute('aria-atomic', 'true');\n        // Create toast content\n        toastEl.innerHTML = `\n      <div class=\"d-flex\">\n        <div class=\"toast-body\">\n          ${message}\n        </div>\n        <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n      </div>\n    `;\n        // Add toast to container\n        toastContainer.appendChild(toastEl);\n        // Initialize and show toast\n        const toast = new bootstrap.Toast(toastEl, {\n            autohide: true,\n            delay: 3000\n        });\n        toast.show();\n        // Remove toast after it's hidden\n        toastEl.addEventListener('hidden.bs.toast', ()=>{\n            toastEl.remove();\n        });\n    },\n    // Show confirmation dialog\n    showConfirmation (message, callback) {\n        if (confirm(message)) callback();\n    },\n    // Render star rating\n    renderStarRating (rating) {\n        let stars = '';\n        for(let i = 1; i <= 5; i++)if (i <= rating) stars += '<i class=\"bi bi-star-fill rating-star\"></i>';\n        else stars += '<i class=\"bi bi-star rating-star\"></i>';\n        return stars;\n    },\n    // Format date string (YYYY/MM/DD to MM/DD/YYYY)\n    formatDate (dateString) {\n        if (!dateString) return '';\n        const parts = dateString.split('/');\n        if (parts.length !== 3) return dateString;\n        return `${parts[1]}/${parts[2]}/${parts[0]}`;\n    },\n    // Get shelf badge HTML\n    getShelfBadge (shelf) {\n        let badgeClass = '';\n        let icon = '';\n        switch(shelf){\n            case 'read':\n                badgeClass = 'shelf-read';\n                icon = 'bi-check-circle';\n                break;\n            case 'currently-reading':\n                badgeClass = 'shelf-currently-reading';\n                icon = 'bi-bookmark';\n                break;\n            case 'to-read':\n                badgeClass = 'shelf-to-read';\n                icon = 'bi-hourglass';\n                break;\n            default:\n                badgeClass = 'bg-secondary text-white';\n                icon = 'bi-book';\n        }\n        return `<span class=\"book-shelf ${badgeClass}\"><i class=\"bi ${icon} me-1\"></i>${this.formatShelfName(shelf)}</span>`;\n    },\n    // Format shelf name for display\n    formatShelfName (shelf) {\n        switch(shelf){\n            case 'read':\n                return 'Read';\n            case 'currently-reading':\n                return 'Currently Reading';\n            case 'to-read':\n                return 'To Read';\n            default:\n                return shelf;\n        }\n    },\n    // Create pagination\n    createPagination (currentPage, totalPages, onPageChange) {\n        const pagination = document.getElementById('pagination');\n        pagination.innerHTML = '';\n        if (totalPages <= 1) return;\n        // Previous button\n        const prevLi = document.createElement('li');\n        prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;\n        const prevLink = document.createElement('a');\n        prevLink.className = 'page-link';\n        prevLink.href = '#';\n        prevLink.setAttribute('aria-label', 'Previous');\n        prevLink.innerHTML = '<span aria-hidden=\"true\">&laquo;</span>';\n        if (currentPage > 1) prevLink.addEventListener('click', (e)=>{\n            e.preventDefault();\n            onPageChange(currentPage - 1);\n        });\n        prevLi.appendChild(prevLink);\n        pagination.appendChild(prevLi);\n        // Page numbers\n        const maxPages = 5;\n        let startPage = Math.max(1, currentPage - Math.floor(maxPages / 2));\n        let endPage = Math.min(totalPages, startPage + maxPages - 1);\n        if (endPage - startPage + 1 < maxPages) startPage = Math.max(1, endPage - maxPages + 1);\n        for(let i = startPage; i <= endPage; i++){\n            const pageLi = document.createElement('li');\n            pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;\n            const pageLink = document.createElement('a');\n            pageLink.className = 'page-link';\n            pageLink.href = '#';\n            pageLink.textContent = i;\n            if (i !== currentPage) pageLink.addEventListener('click', (e)=>{\n                e.preventDefault();\n                onPageChange(i);\n            });\n            pageLi.appendChild(pageLink);\n            pagination.appendChild(pageLi);\n        }\n        // Next button\n        const nextLi = document.createElement('li');\n        nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;\n        const nextLink = document.createElement('a');\n        nextLink.className = 'page-link';\n        nextLink.href = '#';\n        nextLink.setAttribute('aria-label', 'Next');\n        nextLink.innerHTML = '<span aria-hidden=\"true\">&raquo;</span>';\n        if (currentPage < totalPages) nextLink.addEventListener('click', (e)=>{\n            e.preventDefault();\n            onPageChange(currentPage + 1);\n        });\n        nextLi.appendChild(nextLink);\n        pagination.appendChild(nextLi);\n    }\n};\n\n\n\n\nconst $4a002fcb399d90c3$export$61e002c222a9118b = {\n    books: [],\n    filteredBooks: [],\n    currentPage: 1,\n    itemsPerPage: 10,\n    totalPages: 1,\n    currentFilter: 'all',\n    activeFilters: {\n        author: '',\n        genre: '',\n        rating: '',\n        readStatus: ''\n    },\n    // Initialize the book service\n    init () {\n        // Set up event delegation for book actions\n        document.addEventListener('click', (e)=>{\n            // Edit book button\n            if (e.target.closest('.edit-book-btn')) {\n                const bookId = e.target.closest('.edit-book-btn').getAttribute('data-id');\n                this.editBook(bookId);\n            }\n            // Delete book button\n            if (e.target.closest('.delete-book-btn')) {\n                const bookId = e.target.closest('.delete-book-btn').getAttribute('data-id');\n                this.confirmDeleteBook(bookId);\n            }\n            // Update progress button\n            if (e.target.closest('.progress-book-btn')) {\n                const bookId = e.target.closest('.progress-book-btn').getAttribute('data-id');\n                this.showProgressModal(bookId);\n            }\n        });\n        // Set up event listeners for filter buttons\n        const applyFiltersBtn = document.getElementById('apply-filters-btn');\n        if (applyFiltersBtn) applyFiltersBtn.addEventListener('click', ()=>{\n            this.applyFilters();\n        });\n        const clearFiltersBtn = document.getElementById('clear-filters-btn');\n        if (clearFiltersBtn) clearFiltersBtn.addEventListener('click', ()=>{\n            this.clearFilters();\n        });\n        // Load initial data\n        this.loadBooks();\n    },\n    // Load all books\n    async loadBooks (page = 1) {\n        try {\n            this.currentPage = page;\n            this.currentFilter = null;\n            // Get books from API\n            const books = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).getBooks();\n            this.books = books;\n            this.filteredBooks = books;\n            this.currentFilter = 'all';\n            this.currentPage = page;\n            // Calculate total pages\n            this.totalPages = Math.ceil(books.length / this.itemsPerPage);\n            // Render books table\n            this.renderBooksTable(books);\n            // Create pagination\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).createPagination(page, this.totalPages, (page)=>{\n                this.currentPage = page;\n                this.renderBooksTable(books);\n            });\n            // Populate filter dropdowns\n            this.populateFilterOptions(books);\n            // Reset page title\n            const pageTitle = document.getElementById('page-title');\n            pageTitle.textContent = 'All Books';\n        } catch (error) {\n            console.error('Error loading books:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error loading books', 'danger');\n        }\n    },\n    // Load books by shelf\n    async loadShelf (shelf) {\n        try {\n            // Get all books from API\n            const books = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).getBooks();\n            // Filter books by shelf\n            const filteredBooks = books.filter((book)=>book.exclusiveShelf === shelf);\n            // Store filtered books\n            this.books = books;\n            this.filteredBooks = filteredBooks;\n            this.currentFilter = shelf;\n            // Render books in card view\n            this.renderBookCards(filteredBooks, shelf);\n        } catch (error) {\n            console.error(`Error loading ${shelf} books:`, error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast(`Error loading ${shelf} books`, 'danger');\n        }\n    },\n    // Load favorite books\n    async loadFavorites () {\n        try {\n            // Get all books from API\n            const books = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).getBooks();\n            // Filter books that have \"favorites\" in bookshelves\n            const filteredBooks = books.filter((book)=>book.bookshelves && book.bookshelves.toLowerCase().includes('favorites'));\n            // Store filtered books\n            this.books = books;\n            this.filteredBooks = filteredBooks;\n            this.currentFilter = 'favorites';\n            // Render books in card view\n            this.renderBookCards(filteredBooks, 'favorites');\n        } catch (error) {\n            console.error('Error loading favorite books:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error loading favorite books', 'danger');\n        }\n    },\n    // Search books\n    async searchBooks (query) {\n        if (!query.trim()) {\n            this.loadBooks();\n            return;\n        }\n        try {\n            // Get all books from API\n            const books = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).getBooks();\n            // Filter books by search query\n            const filteredBooks = books.filter((book)=>{\n                const searchFields = [\n                    book.title || '',\n                    book.author || '',\n                    book.additionalAuthors || '',\n                    book.publisher || '',\n                    book.isbn || '',\n                    book.isbn13 ? book.isbn13.toString() : ''\n                ];\n                const searchText = searchFields.join(' ').toLowerCase();\n                return searchText.includes(query.toLowerCase());\n            });\n            // Store filtered books\n            this.books = books;\n            this.filteredBooks = filteredBooks;\n            this.currentFilter = 'search';\n            this.currentPage = 1; // Reset to first page for search results\n            // Calculate total pages\n            this.totalPages = Math.ceil(filteredBooks.length / this.itemsPerPage);\n            // Render books table\n            this.renderBooksTable(filteredBooks);\n            // Create pagination\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).createPagination(1, this.totalPages, (page)=>{\n                this.currentPage = page;\n                this.renderBooksTable(filteredBooks);\n            });\n            // Show search results message\n            const pageTitle = document.getElementById('page-title');\n            pageTitle.textContent = `Search Results: ${filteredBooks.length} books found`;\n            // Make sure the books page is visible\n            document.querySelectorAll('.page-content').forEach((page)=>{\n                page.classList.add('d-none');\n            });\n            document.getElementById('books-page').classList.remove('d-none');\n            // Log search results to console for debugging\n            console.log(`Search results for \"${query}\":`, filteredBooks);\n        } catch (error) {\n            console.error('Error searching books:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error searching books', 'danger');\n        }\n    },\n    // Populate filter options\n    populateFilterOptions (books) {\n        // Get unique authors\n        const authors = [\n            ...new Set(books.map((book)=>book.author).filter(Boolean))\n        ].sort();\n        const authorSelect = document.getElementById('filter-author');\n        // Clear existing options except the first one\n        while(authorSelect.options.length > 1)authorSelect.remove(1);\n        // Add author options\n        authors.forEach((author)=>{\n            const option = document.createElement('option');\n            option.value = author;\n            option.textContent = author;\n            authorSelect.appendChild(option);\n        });\n        // Get unique genres/bookshelves\n        const genres = [\n            ...new Set(books.map((book)=>book.bookshelves).filter(Boolean).flatMap((shelves)=>shelves.split(',').map((s)=>s.trim())))\n        ].sort();\n        const genreSelect = document.getElementById('filter-genre');\n        // Clear existing options except the first one\n        while(genreSelect.options.length > 1)genreSelect.remove(1);\n        // Add genre options\n        genres.forEach((genre)=>{\n            const option = document.createElement('option');\n            option.value = genre;\n            option.textContent = genre;\n            genreSelect.appendChild(option);\n        });\n    },\n    // Apply filters\n    applyFilters () {\n        // Get filter values\n        const author = document.getElementById('filter-author').value;\n        const genre = document.getElementById('filter-genre').value;\n        const rating = document.getElementById('filter-rating').value;\n        const readStatus = document.getElementById('filter-read-status').value;\n        // Store active filters\n        this.activeFilters = {\n            author: author,\n            genre: genre,\n            rating: rating,\n            readStatus: readStatus\n        };\n        // Filter books\n        let filteredBooks = this.books;\n        // Filter by author\n        if (author) filteredBooks = filteredBooks.filter((book)=>book.author === author);\n        // Filter by genre/bookshelf\n        if (genre) filteredBooks = filteredBooks.filter((book)=>{\n            const bookshelves = book.bookshelves || '';\n            return bookshelves.split(',').map((s)=>s.trim()).includes(genre);\n        });\n        // Filter by rating\n        if (rating) {\n            const minRating = parseInt(rating);\n            filteredBooks = filteredBooks.filter((book)=>{\n                const bookRating = book.rating || 0;\n                return bookRating >= minRating;\n            });\n        }\n        // Filter by read status\n        if (readStatus) filteredBooks = filteredBooks.filter((book)=>book.exclusiveShelf === readStatus);\n        // Store filtered books\n        this.filteredBooks = filteredBooks;\n        this.currentFilter = 'filter';\n        this.currentPage = 1; // Reset to first page for filtered results\n        // Calculate total pages\n        this.totalPages = Math.ceil(filteredBooks.length / this.itemsPerPage);\n        // Render books table\n        this.renderBooksTable(filteredBooks);\n        // Create pagination\n        (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).createPagination(1, this.totalPages, (page)=>{\n            this.currentPage = page;\n            this.renderBooksTable(filteredBooks);\n        });\n        // Show filter results message\n        const pageTitle = document.getElementById('page-title');\n        pageTitle.textContent = `Filtered Results: ${filteredBooks.length} books found`;\n        // Make sure the books page is visible\n        document.querySelectorAll('.page-content').forEach((page)=>{\n            page.classList.add('d-none');\n        });\n        document.getElementById('books-page').classList.remove('d-none');\n        // Hide the filter modal\n        const filterModal = bootstrap.Modal.getInstance(document.getElementById('filter-modal'));\n        filterModal.hide();\n        // Show applied filters summary\n        this.showFilterSummary();\n    },\n    // Clear filters\n    clearFilters () {\n        // Reset filter form\n        document.getElementById('filter-form').reset();\n        // Reset active filters\n        this.activeFilters = {\n            author: '',\n            genre: '',\n            rating: '',\n            readStatus: ''\n        };\n        // Load all books\n        this.loadBooks();\n        // Hide the filter modal\n        const filterModal = bootstrap.Modal.getInstance(document.getElementById('filter-modal'));\n        filterModal.hide();\n    },\n    // Show filter summary\n    showFilterSummary () {\n        const { author: author, genre: genre, rating: rating, readStatus: readStatus } = this.activeFilters;\n        if (!author && !genre && !rating && !readStatus) return;\n        let message = 'Filters applied: ';\n        const filters = [];\n        if (author) filters.push(`Author: ${author}`);\n        if (genre) filters.push(`Genre: ${genre}`);\n        if (rating) filters.push(`${rating}+ Stars`);\n        if (readStatus) filters.push(`Status: ${(0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).formatShelfName(readStatus)}`);\n        message += filters.join(', ');\n        (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast(message, 'info');\n    },\n    // Render books table\n    renderBooksTable (books) {\n        const tableBody = document.getElementById('books-table-body');\n        tableBody.innerHTML = '';\n        // Calculate start and end indices for current page\n        const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n        const endIndex = Math.min(startIndex + this.itemsPerPage, books.length);\n        // Get books for current page\n        const booksForPage = books.slice(startIndex, endIndex);\n        if (booksForPage.length === 0) {\n            tableBody.innerHTML = `\n        <tr>\n          <td colspan=\"6\" class=\"text-center\">No books found</td>\n        </tr>\n      `;\n            return;\n        }\n        // Create table rows\n        booksForPage.forEach((book)=>{\n            const row = document.createElement('tr');\n            // Book title\n            const titleCell = document.createElement('td');\n            titleCell.innerHTML = `<span class=\"book-title\">${book.title}</span>`;\n            row.appendChild(titleCell);\n            // Author\n            const authorCell = document.createElement('td');\n            authorCell.innerHTML = `<span class=\"book-author\">${book.author}</span>`;\n            row.appendChild(authorCell);\n            // Rating\n            const ratingCell = document.createElement('td');\n            ratingCell.innerHTML = `<div class=\"book-rating\">${(0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).renderStarRating(book.rating)}</div>`;\n            row.appendChild(ratingCell);\n            // Shelf\n            const shelfCell = document.createElement('td');\n            shelfCell.innerHTML = (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).getShelfBadge(book.exclusiveShelf);\n            row.appendChild(shelfCell);\n            // Pages\n            const pagesCell = document.createElement('td');\n            pagesCell.textContent = book.pages || '-';\n            row.appendChild(pagesCell);\n            // Actions\n            const actionsCell = document.createElement('td');\n            actionsCell.innerHTML = `\n        <div class=\"btn-group\" role=\"group\">\n          <button type=\"button\" class=\"btn btn-sm btn-outline-primary action-btn progress-book-btn\" data-id=\"${book.bookId}\" title=\"Update Progress\">\n            <i class=\"bi bi-bookmark\"></i>\n          </button>\n          <button type=\"button\" class=\"btn btn-sm btn-outline-secondary action-btn edit-book-btn\" data-id=\"${book.bookId}\" title=\"Edit\">\n            <i class=\"bi bi-pencil\"></i>\n          </button>\n          <button type=\"button\" class=\"btn btn-sm btn-outline-danger action-btn delete-book-btn\" data-id=\"${book.bookId}\" title=\"Delete\">\n            <i class=\"bi bi-trash\"></i>\n          </button>\n        </div>\n      `;\n            row.appendChild(actionsCell);\n            tableBody.appendChild(row);\n        });\n    },\n    // Render book cards\n    renderBookCards (books, container) {\n        const containerElement = document.getElementById(`${container}-books`);\n        containerElement.innerHTML = '';\n        if (books.length === 0) {\n            containerElement.innerHTML = `\n        <div class=\"col-12 text-center my-5\">\n          <h5>No books found</h5>\n        </div>\n      `;\n            return;\n        }\n        books.forEach((book)=>{\n            const card = document.createElement('div');\n            card.className = 'col-md-6 col-lg-4 col-xl-3 mb-4';\n            // Reading progress HTML\n            let progressHtml = '';\n            if (book.exclusiveShelf === 'currently-reading' && book.readingProgress) {\n                const percent = book.readingProgress.percentComplete || 0;\n                const currentPage = book.readingProgress.currentPage || 0;\n                const totalPages = book.pages || 0;\n                progressHtml = `\n          <div class=\"progress-container\">\n            <div class=\"progress\">\n              <div class=\"progress-bar bg-success\" role=\"progressbar\" style=\"width: ${percent}%\" \n                aria-valuenow=\"${percent}\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n            </div>\n            <div class=\"progress-info\">\n              <span>${currentPage} of ${totalPages} pages</span>\n              <span>${percent}% complete</span>\n            </div>\n          </div>\n        `;\n            }\n            card.innerHTML = `\n        <div class=\"card book-card\">\n          <div class=\"card-img-top\">\n            <i class=\"bi bi-book\"></i>\n          </div>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">${book.title}</h5>\n            <p class=\"card-author\">${book.author}</p>\n            <div class=\"card-rating mb-2\">${(0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).renderStarRating(book.rating)}</div>\n            ${(0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).getShelfBadge(book.exclusiveShelf)}\n            ${progressHtml}\n            <div class=\"mt-3\">\n              <button type=\"button\" class=\"btn btn-sm btn-outline-primary progress-book-btn\" data-id=\"${book.bookId}\">\n                <i class=\"bi bi-bookmark me-1\"></i>Update Progress\n              </button>\n              <div class=\"btn-group mt-2\" role=\"group\">\n                <button type=\"button\" class=\"btn btn-sm btn-outline-secondary edit-book-btn\" data-id=\"${book.bookId}\">\n                  <i class=\"bi bi-pencil\"></i>\n                </button>\n                <button type=\"button\" class=\"btn btn-sm btn-outline-danger delete-book-btn\" data-id=\"${book.bookId}\">\n                  <i class=\"bi bi-trash\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n            containerElement.appendChild(card);\n        });\n    },\n    // Save book (create or update)\n    async saveBook () {\n        try {\n            // Get form data\n            const bookId = document.getElementById('book-id').value;\n            const title = document.getElementById('title').value;\n            const author = document.getElementById('author').value;\n            const additionalAuthors = document.getElementById('additional-authors').value;\n            const isbn = document.getElementById('isbn').value;\n            const isbn13 = document.getElementById('isbn13').value;\n            const publisher = document.getElementById('publisher').value;\n            const binding = document.getElementById('binding').value;\n            const pages = document.getElementById('pages').value;\n            const published = document.getElementById('published').value;\n            const editionPublished = document.getElementById('edition-published').value;\n            const exclusiveShelf = document.getElementById('exclusive-shelf').value;\n            const bookshelves = document.getElementById('bookshelves').value;\n            const rating = document.getElementById('rating').value;\n            const myReview = document.getElementById('my-review').value;\n            // Create book object\n            const book = {\n                title: title,\n                author: author,\n                additionalAuthors: additionalAuthors,\n                isbn: isbn,\n                isbn13: isbn13 ? parseInt(isbn13) : null,\n                publisher: publisher,\n                binding: binding,\n                pages: pages ? parseInt(pages) : null,\n                published: published ? parseInt(published) : null,\n                editionPublished: editionPublished ? parseInt(editionPublished) : null,\n                exclusiveShelf: exclusiveShelf,\n                bookshelves: bookshelves,\n                rating: rating ? parseInt(rating) : null,\n                myReview: myReview,\n                dateAdded: new Date().toISOString().split('T')[0].replace(/-/g, '/')\n            };\n            let result;\n            if (bookId) {\n                // Update existing book\n                result = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).updateBook(bookId, book);\n                (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Book updated successfully', 'success');\n            } else {\n                // Create new book\n                result = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).createBook(book);\n                (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Book added successfully', 'success');\n            }\n            // Hide modal\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).bookModal.hide();\n            // Reload books\n            if (this.currentFilter) {\n                if (this.currentFilter === 'favorites') this.loadFavorites();\n                else this.loadShelf(this.currentFilter);\n            } else this.loadBooks(this.currentPage);\n        } catch (error) {\n            console.error('Error saving book:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error saving book', 'danger');\n        }\n    },\n    // Edit book\n    async editBook (bookId) {\n        try {\n            // Find book in current books array\n            const book = this.books.find((b)=>b.bookId == bookId);\n            if (book) // Show book modal with book data\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showBookModal(book);\n            else {\n                // Fetch book from API\n                const book = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).getBook(bookId);\n                (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showBookModal(book);\n            }\n        } catch (error) {\n            console.error('Error editing book:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error loading book details', 'danger');\n        }\n    },\n    // Confirm delete book\n    confirmDeleteBook (bookId) {\n        (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showConfirmation('Are you sure you want to delete this book?', ()=>{\n            this.deleteBook(bookId);\n        });\n    },\n    // Delete book\n    async deleteBook (bookId) {\n        try {\n            // Delete book from API\n            await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).deleteBook(bookId);\n            // Show success message\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Book deleted successfully', 'success');\n            // Reload books\n            if (this.currentFilter) {\n                if (this.currentFilter === 'favorites') this.loadFavorites();\n                else this.loadShelf(this.currentFilter);\n            } else this.loadBooks(this.currentPage);\n        } catch (error) {\n            console.error('Error deleting book:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error deleting book', 'danger');\n        }\n    },\n    // Show progress modal\n    async showProgressModal (bookId) {\n        try {\n            // Find book in current books array\n            let book = this.books.find((b)=>b.bookId == bookId);\n            if (!book) // Fetch book from API\n            book = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).getBook(bookId);\n            if (book) // Show progress modal with book data\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showProgressModal(book);\n        } catch (error) {\n            console.error('Error showing progress modal:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error loading book details', 'danger');\n        }\n    },\n    // Save reading progress\n    async saveReadingProgress () {\n        try {\n            // Get form data\n            const bookId = document.getElementById('progress-book-id').value;\n            const currentPage = parseInt(document.getElementById('current-page').value);\n            const percentComplete = parseInt(document.getElementById('percent-complete').value);\n            // Update reading progress\n            const progress = {\n                currentPage: currentPage,\n                percentComplete: percentComplete\n            };\n            await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).updateReadingProgress(bookId, progress);\n            // Show success message\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Reading progress updated', 'success');\n            // Hide modal\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).progressModal.hide();\n            // Reload books\n            if (this.currentFilter) {\n                if (this.currentFilter === 'favorites') this.loadFavorites();\n                else this.loadShelf(this.currentFilter);\n            } else this.loadBooks(this.currentPage);\n        } catch (error) {\n            console.error('Error saving reading progress:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error updating reading progress', 'danger');\n        }\n    }\n};\n\n\n\n\nconst $63bdc4fa2e3cda72$export$8100295413ef12b3 = {\n    challenges: [],\n    // Initialize the challenge service\n    init () {\n    // Nothing specific to initialize\n    },\n    // Load all reading challenges\n    async loadChallenges () {\n        try {\n            // Get challenges from API\n            const challenges = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).getChallenges();\n            this.challenges = challenges;\n            // Render challenges\n            this.renderChallenges(challenges);\n            // Create reading progress chart\n            this.createReadingProgressChart(challenges);\n        } catch (error) {\n            console.error('Error loading challenges:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error loading reading challenges', 'danger');\n        }\n    },\n    // Render challenges\n    renderChallenges (challenges) {\n        // Render current year challenge\n        this.renderCurrentChallenge(challenges);\n        // Render past challenges\n        this.renderPastChallenges(challenges);\n    },\n    // Render current year challenge\n    renderCurrentChallenge (challenges) {\n        const currentYear = new Date().getFullYear();\n        const currentChallenge = challenges.find((c)=>c.year === currentYear);\n        const currentChallengeElement = document.getElementById('current-challenge');\n        if (!currentChallenge) {\n            currentChallengeElement.innerHTML = `\n        <div class=\"text-center py-4\">\n          <p>No reading challenge set for ${currentYear}</p>\n          <button class=\"btn btn-primary\" id=\"new-challenge-btn\">\n            <i class=\"bi bi-plus-lg me-2\"></i>Set a Reading Goal\n          </button>\n        </div>\n      `;\n            // Add event listener to new challenge button\n            const newChallengeBtn = document.getElementById('new-challenge-btn');\n            newChallengeBtn.addEventListener('click', ()=>{\n                (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showChallengeModal();\n            });\n            return;\n        }\n        // Calculate progress percentage\n        const progressPercent = Math.min(100, Math.round(currentChallenge.completed / currentChallenge.goal * 100));\n        // Determine progress bar color\n        let progressColor = 'bg-success';\n        if (progressPercent < 25) progressColor = 'bg-danger';\n        else if (progressPercent < 50) progressColor = 'bg-warning';\n        else if (progressPercent < 75) progressColor = 'bg-info';\n        currentChallengeElement.innerHTML = `\n      <div class=\"challenge-card\">\n        <h2 class=\"text-center mb-3\">${currentYear} Reading Challenge</h2>\n        <div class=\"text-center mb-4\">\n          <h3>\n            <span class=\"badge ${progressPercent >= 100 ? 'bg-success' : 'bg-primary'}\">\n              ${currentChallenge.completed} of ${currentChallenge.goal} books\n            </span>\n          </h3>\n        </div>\n        <div class=\"progress challenge-progress\">\n          <div class=\"progress-bar ${progressColor}\" role=\"progressbar\" \n            style=\"width: ${progressPercent}%\" \n            aria-valuenow=\"${progressPercent}\" \n            aria-valuemin=\"0\" \n            aria-valuemax=\"100\">\n            ${progressPercent}%\n          </div>\n        </div>\n        <div class=\"challenge-info\">\n          <span>Started: ${new Date(currentChallenge.createdAt).toLocaleDateString()}</span>\n          <span>${currentChallenge.goal - currentChallenge.completed} books to go</span>\n        </div>\n        <div class=\"text-center mt-4\">\n          <button class=\"btn btn-outline-primary edit-challenge-btn\" data-year=\"${currentChallenge.year}\">\n            <i class=\"bi bi-pencil me-2\"></i>Edit Challenge\n          </button>\n        </div>\n      </div>\n    `;\n        // Add event listener to edit challenge button\n        const editChallengeBtn = document.querySelector('.edit-challenge-btn');\n        editChallengeBtn.addEventListener('click', ()=>{\n            this.editChallenge(currentChallenge.year);\n        });\n    },\n    // Render past challenges\n    renderPastChallenges (challenges) {\n        const currentYear = new Date().getFullYear();\n        const pastChallenges = challenges.filter((c)=>c.year !== currentYear).sort((a, b)=>b.year - a.year);\n        const pastChallengesElement = document.getElementById('past-challenges');\n        if (pastChallenges.length === 0) {\n            pastChallengesElement.innerHTML = `\n        <tr>\n          <td colspan=\"4\" class=\"text-center\">No past reading challenges</td>\n        </tr>\n      `;\n            return;\n        }\n        pastChallengesElement.innerHTML = '';\n        pastChallenges.forEach((challenge)=>{\n            // Calculate progress percentage\n            const progressPercent = Math.min(100, Math.round(challenge.completed / challenge.goal * 100));\n            // Determine progress bar color\n            let progressColor = 'bg-success';\n            if (progressPercent < 25) progressColor = 'bg-danger';\n            else if (progressPercent < 50) progressColor = 'bg-warning';\n            else if (progressPercent < 75) progressColor = 'bg-info';\n            const row = document.createElement('tr');\n            row.innerHTML = `\n        <td>${challenge.year}</td>\n        <td>${challenge.goal}</td>\n        <td>${challenge.completed}</td>\n        <td>\n          <div class=\"progress\">\n            <div class=\"progress-bar ${progressColor}\" role=\"progressbar\" \n              style=\"width: ${progressPercent}%\" \n              aria-valuenow=\"${progressPercent}\" \n              aria-valuemin=\"0\" \n              aria-valuemax=\"100\">\n              ${progressPercent}%\n            </div>\n          </div>\n        </td>\n      `;\n            pastChallengesElement.appendChild(row);\n        });\n    },\n    // Create reading progress chart\n    createReadingProgressChart (challenges) {\n        const currentYear = new Date().getFullYear();\n        const currentChallenge = challenges.find((c)=>c.year === currentYear);\n        if (!currentChallenge) return;\n        const ctx = document.getElementById('reading-progress-chart').getContext('2d');\n        // Get monthly data (this would normally come from the API)\n        // For now, we'll create mock data\n        const monthlyData = this.generateMonthlyData(currentChallenge.completed);\n        // Calculate target line (goal divided by 12 months, cumulative)\n        const targetLine = Array(12).fill(0).map((_, i)=>{\n            return Math.round((i + 1) / 12 * currentChallenge.goal);\n        });\n        // Create chart\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: [\n                    'Jan',\n                    'Feb',\n                    'Mar',\n                    'Apr',\n                    'May',\n                    'Jun',\n                    'Jul',\n                    'Aug',\n                    'Sep',\n                    'Oct',\n                    'Nov',\n                    'Dec'\n                ],\n                datasets: [\n                    {\n                        label: 'Books Read',\n                        data: monthlyData.cumulative,\n                        backgroundColor: 'rgba(0, 123, 255, 0.1)',\n                        borderColor: 'rgba(0, 123, 255, 1)',\n                        borderWidth: 2,\n                        fill: true,\n                        tension: 0.4\n                    },\n                    {\n                        label: 'Target',\n                        data: targetLine,\n                        borderColor: 'rgba(220, 53, 69, 0.5)',\n                        borderWidth: 2,\n                        borderDash: [\n                            5,\n                            5\n                        ],\n                        fill: false,\n                        pointRadius: 0\n                    }\n                ]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        ticks: {\n                            precision: 0\n                        }\n                    }\n                },\n                plugins: {\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                const label = context.dataset.label || '';\n                                const value = context.parsed.y;\n                                return `${label}: ${value} books`;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    },\n    // Generate monthly reading data (mock data)\n    generateMonthlyData (totalBooks) {\n        const currentMonth = new Date().getMonth();\n        // Generate random monthly counts that sum to totalBooks\n        const monthlyCount = Array(12).fill(0);\n        // Only fill months up to current month\n        let remaining = totalBooks;\n        for(let i = 0; i <= currentMonth; i++){\n            if (i === currentMonth) monthlyCount[i] = remaining;\n            else {\n                const count = Math.floor(Math.random() * (remaining / 2)) + 1;\n                monthlyCount[i] = Math.min(count, remaining);\n                remaining -= monthlyCount[i];\n            }\n            if (remaining <= 0) break;\n        }\n        // Calculate cumulative counts\n        const cumulativeCount = [];\n        let sum = 0;\n        for(let i = 0; i < 12; i++){\n            sum += monthlyCount[i];\n            cumulativeCount.push(sum);\n        }\n        return {\n            monthly: monthlyCount,\n            cumulative: cumulativeCount\n        };\n    },\n    // Save challenge\n    async saveChallenge () {\n        try {\n            // Get form data\n            const year = parseInt(document.getElementById('challenge-year').value);\n            const goal = parseInt(document.getElementById('challenge-goal').value);\n            if (!year || !goal) {\n                (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Please fill in all fields', 'warning');\n                return;\n            }\n            // Check if challenge for this year already exists\n            const existingChallenge = this.challenges.find((c)=>c.year === year);\n            if (existingChallenge) {\n                // Update existing challenge\n                await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).updateChallenge(year, {\n                    goal: goal,\n                    completed: existingChallenge.completed\n                });\n                (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Reading challenge updated', 'success');\n            } else {\n                // Create new challenge\n                await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).createChallenge({\n                    year: year,\n                    goal: goal\n                });\n                (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Reading challenge created', 'success');\n            }\n            // Hide modal\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).challengeModal.hide();\n            // Reload challenges\n            this.loadChallenges();\n        } catch (error) {\n            console.error('Error saving challenge:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error saving reading challenge', 'danger');\n        }\n    },\n    // Edit challenge\n    editChallenge (year) {\n        const challenge = this.challenges.find((c)=>c.year === year);\n        if (challenge) (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showChallengeModal(challenge);\n    }\n};\n\n\n\n\n\nconst $f86e092a81110eda$export$eaeb1ac5e2018f39 = {\n    // Initialize the import/export service\n    init () {\n    // Nothing specific to initialize\n    },\n    // Import books from file\n    async importBooks () {\n        try {\n            const fileInput = document.getElementById('import-file');\n            if (!fileInput.files || fileInput.files.length === 0) {\n                (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Please select a file to import', 'warning');\n                return;\n            }\n            const file = fileInput.files[0];\n            const fileType = this.getFileType(file.name);\n            if (!fileType) {\n                (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Unsupported file format. Please use JSON or CSV files.', 'warning');\n                return;\n            }\n            // Show loading message\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Importing books, please wait...', 'info');\n            let result;\n            if (fileType === 'json') result = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).importJson(file);\n            else if (fileType === 'csv') result = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).importCsv(file);\n            // Show success message\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast(result.message, 'success');\n            // Reset file input\n            fileInput.value = '';\n            // Reload books\n            (0, $4a002fcb399d90c3$export$61e002c222a9118b).loadBooks();\n        } catch (error) {\n            console.error('Error importing books:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error importing books', 'danger');\n        }\n    },\n    // Export books to file\n    async exportBooks (format) {\n        try {\n            // Show loading message\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast(`Preparing ${format.toUpperCase()} export...`, 'info');\n            // Get books from API\n            const books = await (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).exportJson();\n            if (format === 'json') this.exportJson(books);\n            else if (format === 'csv') this.exportCsv(books);\n        } catch (error) {\n            console.error('Error exporting books:', error);\n            (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Error exporting books', 'danger');\n        }\n    },\n    // Export books to JSON file\n    exportJson (books) {\n        const jsonString = JSON.stringify(books, null, 2);\n        const blob = new Blob([\n            jsonString\n        ], {\n            type: 'application/json'\n        });\n        // Generate filename with current date\n        const date = new Date().toISOString().split('T')[0];\n        const filename = `book_export_${date}.json`;\n        // Save file\n        saveAs(blob, filename);\n        // Show success message\n        (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Books exported to JSON successfully', 'success');\n    },\n    // Export books to CSV file\n    exportCsv (books) {\n        // Get all possible headers from books\n        const headers = this.getAllHeaders(books);\n        // Create CSV content\n        let csvContent = headers.join(',') + '\\\\n';\n        books.forEach((book)=>{\n            const row = headers.map((header)=>{\n                const value = book[this.camelCase(header)];\n                // Handle different value types\n                if (value === null || value === undefined) return '';\n                else if (typeof value === 'string') // Escape quotes and wrap in quotes\n                return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n                else if (Array.isArray(value)) return '\"' + JSON.stringify(value).replace(/\"/g, '\"\"') + '\"';\n                else return value;\n            });\n            csvContent += row.join(',') + '\\\\n';\n        });\n        const blob = new Blob([\n            csvContent\n        ], {\n            type: 'text/csv;charset=utf-8'\n        });\n        // Generate filename with current date\n        const date = new Date().toISOString().split('T')[0];\n        const filename = `book_export_${date}.csv`;\n        // Save file\n        saveAs(blob, filename);\n        // Show success message\n        (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showToast('Books exported to CSV successfully', 'success');\n    },\n    // Get file type from filename\n    getFileType (filename) {\n        const extension = filename.split('.').pop().toLowerCase();\n        if (extension === 'json') return 'json';\n        else if (extension === 'csv') return 'csv';\n        return null;\n    },\n    // Get all headers from books\n    getAllHeaders (books) {\n        const headers = new Set();\n        // Original headers from the Goodreads export\n        const originalHeaders = [\n            'Book Id',\n            'Title',\n            'Author',\n            'Author (By Last Name)',\n            'Additional Authors',\n            'ISBN',\n            'ISBN13',\n            'Rating',\n            'Average Rating',\n            'Publisher',\n            'Binding',\n            'Pages',\n            'BEq',\n            'Edition Published',\n            'Published',\n            'Date Read',\n            'Date Added',\n            'Bookshelves',\n            'Bookshelves with positions',\n            'Exclusive Shelf',\n            'My Review',\n            'Spoiler',\n            'Private Notes',\n            'Read Count',\n            'Owned Copies'\n        ];\n        // Add original headers\n        originalHeaders.forEach((header)=>headers.add(header));\n        return Array.from(headers);\n    },\n    // Convert header to camelCase\n    camelCase (header) {\n        // Special case for 'Book Id'\n        if (header === 'Book Id') return 'bookId';\n        // Special case for 'Author (By Last Name)'\n        if (header === 'Author (By Last Name)') return 'authorByLastName';\n        // Special case for 'BEq'\n        if (header === 'BEq') return 'beq';\n        // Special case for 'ISBN'\n        if (header === 'ISBN') return 'isbn';\n        // Special case for 'ISBN13'\n        if (header === 'ISBN13') return 'isbn13';\n        // Special case for 'Bookshelves with positions'\n        if (header === 'Bookshelves with positions') return 'bookshelvesWithPositions';\n        // Special case for 'Exclusive Shelf'\n        if (header === 'Exclusive Shelf') return 'exclusiveShelf';\n        // Special case for 'My Review'\n        if (header === 'My Review') return 'myReview';\n        // Special case for 'Read Count'\n        if (header === 'Read Count') return 'readCount';\n        // Special case for 'Owned Copies'\n        if (header === 'Owned Copies') return 'ownedCopies';\n        // Special case for 'Edition Published'\n        if (header === 'Edition Published') return 'editionPublished';\n        // Special case for 'Date Read'\n        if (header === 'Date Read') return 'dateRead';\n        // Special case for 'Date Added'\n        if (header === 'Date Added') return 'dateAdded';\n        // Special case for 'Private Notes'\n        if (header === 'Private Notes') return 'privateNotes';\n        // Special case for 'Average Rating'\n        if (header === 'Average Rating') return 'averageRating';\n        // General case\n        return header.toLowerCase().replace(/\\s(.)/g, (_, char)=>char.toUpperCase());\n    }\n};\n\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    // Initialize services\n    (0, $96e14f2a7c3555e4$export$d0204b1ddc8ee140).init();\n    (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).init();\n    (0, $4a002fcb399d90c3$export$61e002c222a9118b).init();\n    (0, $63bdc4fa2e3cda72$export$8100295413ef12b3).init();\n    (0, $f86e092a81110eda$export$eaeb1ac5e2018f39).init();\n    // Load initial data\n    (0, $4a002fcb399d90c3$export$61e002c222a9118b).loadBooks();\n    (0, $63bdc4fa2e3cda72$export$8100295413ef12b3).loadChallenges();\n    // Set up navigation\n    $2b6e161c9edcf319$var$setupNavigation();\n    // Set up event listeners\n    $2b6e161c9edcf319$var$setupEventListeners();\n});\n// Set up navigation between pages\nfunction $2b6e161c9edcf319$var$setupNavigation() {\n    const navLinks = document.querySelectorAll('.nav-link');\n    navLinks.forEach((link)=>{\n        link.addEventListener('click', (e)=>{\n            e.preventDefault();\n            // Remove active class from all links\n            navLinks.forEach((l)=>l.classList.remove('active'));\n            // Add active class to clicked link\n            link.classList.add('active');\n            // Get page to show\n            const page = link.getAttribute('data-page');\n            // Update page title\n            const pageTitle = document.getElementById('page-title');\n            pageTitle.textContent = link.textContent.trim();\n            // Hide all pages\n            const pages = document.querySelectorAll('.page-content');\n            pages.forEach((p)=>p.classList.add('d-none'));\n            // Show selected page\n            const selectedPage = document.getElementById(`${page}-page`);\n            if (selectedPage) selectedPage.classList.remove('d-none');\n            // Load page-specific data\n            if (page === 'books') (0, $4a002fcb399d90c3$export$61e002c222a9118b).loadBooks();\n            else if (page === 'currently-reading') (0, $4a002fcb399d90c3$export$61e002c222a9118b).loadShelf('currently-reading');\n            else if (page === 'read') (0, $4a002fcb399d90c3$export$61e002c222a9118b).loadShelf('read');\n            else if (page === 'to-read') (0, $4a002fcb399d90c3$export$61e002c222a9118b).loadShelf('to-read');\n            else if (page === 'favorites') (0, $4a002fcb399d90c3$export$61e002c222a9118b).loadFavorites();\n            else if (page === 'challenges') (0, $63bdc4fa2e3cda72$export$8100295413ef12b3).loadChallenges();\n        });\n    });\n}\n// Set up event listeners for various actions\nfunction $2b6e161c9edcf319$var$setupEventListeners() {\n    // Add book button\n    const addBookBtn = document.getElementById('add-book-btn');\n    addBookBtn.addEventListener('click', ()=>{\n        (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showBookModal();\n    });\n    // Save book button\n    const saveBookBtn = document.getElementById('save-book-btn');\n    saveBookBtn.addEventListener('click', ()=>{\n        (0, $4a002fcb399d90c3$export$61e002c222a9118b).saveBook();\n    });\n    // Search button\n    const searchButton = document.getElementById('search-button');\n    searchButton.addEventListener('click', ()=>{\n        const searchInput = document.getElementById('search-input');\n        (0, $4a002fcb399d90c3$export$61e002c222a9118b).searchBooks(searchInput.value);\n    });\n    // Search input (on enter key)\n    const searchInput = document.getElementById('search-input');\n    searchInput.addEventListener('keyup', (e)=>{\n        if (e.key === 'Enter') (0, $4a002fcb399d90c3$export$61e002c222a9118b).searchBooks(searchInput.value);\n    });\n    // New challenge button\n    const newChallengeBtn = document.getElementById('new-challenge-btn');\n    newChallengeBtn.addEventListener('click', ()=>{\n        (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).showChallengeModal();\n    });\n    // Save challenge button\n    const saveChallengeBtn = document.getElementById('save-challenge-btn');\n    saveChallengeBtn.addEventListener('click', ()=>{\n        (0, $63bdc4fa2e3cda72$export$8100295413ef12b3).saveChallenge();\n    });\n    // Save reading progress button\n    const saveProgressBtn = document.getElementById('save-progress-btn');\n    saveProgressBtn.addEventListener('click', ()=>{\n        (0, $4a002fcb399d90c3$export$61e002c222a9118b).saveReadingProgress();\n    });\n    // Current page input (update percent)\n    const currentPageInput = document.getElementById('current-page');\n    currentPageInput.addEventListener('input', ()=>{\n        (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).updatePercentFromPage();\n    });\n    // Percent complete slider (update page)\n    const percentComplete = document.getElementById('percent-complete');\n    percentComplete.addEventListener('input', ()=>{\n        (0, $84923368ea4a1ab4$export$4e73d36b0bd075d1).updatePageFromPercent();\n    });\n    // Import form\n    const importForm = document.getElementById('import-form');\n    importForm.addEventListener('submit', (e)=>{\n        e.preventDefault();\n        (0, $f86e092a81110eda$export$eaeb1ac5e2018f39).importBooks();\n    });\n    // Export buttons\n    const exportJsonBtn = document.getElementById('export-json-btn');\n    exportJsonBtn.addEventListener('click', ()=>{\n        (0, $f86e092a81110eda$export$eaeb1ac5e2018f39).exportBooks('json');\n    });\n    const exportCsvBtn = document.getElementById('export-csv-btn');\n    exportCsvBtn.addEventListener('click', ()=>{\n        (0, $f86e092a81110eda$export$eaeb1ac5e2018f39).exportBooks('csv');\n    });\n}\n\n\n//# sourceMappingURL=index.f605556f.js.map\n","import { apiService } from './api.js';\nimport { uiService } from './ui.js';\nimport { bookService } from './book-service.js';\nimport { challengeService } from './challenge-service.js';\nimport { importExportService } from './import-export.js';\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Initialize services\n  apiService.init();\n  uiService.init();\n  bookService.init();\n  challengeService.init();\n  importExportService.init();\n  \n  // Load initial data\n  bookService.loadBooks();\n  challengeService.loadChallenges();\n  \n  // Set up navigation\n  setupNavigation();\n  \n  // Set up event listeners\n  setupEventListeners();\n});\n\n// Set up navigation between pages\nfunction setupNavigation() {\n  const navLinks = document.querySelectorAll('.nav-link');\n  \n  navLinks.forEach(link => {\n    link.addEventListener('click', (e) => {\n      e.preventDefault();\n      \n      // Remove active class from all links\n      navLinks.forEach(l => l.classList.remove('active'));\n      \n      // Add active class to clicked link\n      link.classList.add('active');\n      \n      // Get page to show\n      const page = link.getAttribute('data-page');\n      \n      // Update page title\n      const pageTitle = document.getElementById('page-title');\n      pageTitle.textContent = link.textContent.trim();\n      \n      // Hide all pages\n      const pages = document.querySelectorAll('.page-content');\n      pages.forEach(p => p.classList.add('d-none'));\n      \n      // Show selected page\n      const selectedPage = document.getElementById(`${page}-page`);\n      if (selectedPage) {\n        selectedPage.classList.remove('d-none');\n      }\n      \n      // Load page-specific data\n      if (page === 'books') {\n        bookService.loadBooks();\n      } else if (page === 'currently-reading') {\n        bookService.loadShelf('currently-reading');\n      } else if (page === 'read') {\n        bookService.loadShelf('read');\n      } else if (page === 'to-read') {\n        bookService.loadShelf('to-read');\n      } else if (page === 'favorites') {\n        bookService.loadFavorites();\n      } else if (page === 'challenges') {\n        challengeService.loadChallenges();\n      }\n    });\n  });\n}\n\n// Set up event listeners for various actions\nfunction setupEventListeners() {\n  // Add book button\n  const addBookBtn = document.getElementById('add-book-btn');\n  addBookBtn.addEventListener('click', () => {\n    uiService.showBookModal();\n  });\n  \n  // Save book button\n  const saveBookBtn = document.getElementById('save-book-btn');\n  saveBookBtn.addEventListener('click', () => {\n    bookService.saveBook();\n  });\n  \n  // Search button\n  const searchButton = document.getElementById('search-button');\n  searchButton.addEventListener('click', () => {\n    const searchInput = document.getElementById('search-input');\n    bookService.searchBooks(searchInput.value);\n  });\n  \n  // Search input (on enter key)\n  const searchInput = document.getElementById('search-input');\n  searchInput.addEventListener('keyup', (e) => {\n    if (e.key === 'Enter') {\n      bookService.searchBooks(searchInput.value);\n    }\n  });\n  \n  // New challenge button\n  const newChallengeBtn = document.getElementById('new-challenge-btn');\n  newChallengeBtn.addEventListener('click', () => {\n    uiService.showChallengeModal();\n  });\n  \n  // Save challenge button\n  const saveChallengeBtn = document.getElementById('save-challenge-btn');\n  saveChallengeBtn.addEventListener('click', () => {\n    challengeService.saveChallenge();\n  });\n  \n  // Save reading progress button\n  const saveProgressBtn = document.getElementById('save-progress-btn');\n  saveProgressBtn.addEventListener('click', () => {\n    bookService.saveReadingProgress();\n  });\n  \n  // Current page input (update percent)\n  const currentPageInput = document.getElementById('current-page');\n  currentPageInput.addEventListener('input', () => {\n    uiService.updatePercentFromPage();\n  });\n  \n  // Percent complete slider (update page)\n  const percentComplete = document.getElementById('percent-complete');\n  percentComplete.addEventListener('input', () => {\n    uiService.updatePageFromPercent();\n  });\n  \n  // Import form\n  const importForm = document.getElementById('import-form');\n  importForm.addEventListener('submit', (e) => {\n    e.preventDefault();\n    importExportService.importBooks();\n  });\n  \n  // Export buttons\n  const exportJsonBtn = document.getElementById('export-json-btn');\n  exportJsonBtn.addEventListener('click', () => {\n    importExportService.exportBooks('json');\n  });\n  \n  const exportCsvBtn = document.getElementById('export-csv-btn');\n  exportCsvBtn.addEventListener('click', () => {\n    importExportService.exportBooks('csv');\n  });\n}\n","// API Service for handling API requests\nexport const apiService = {\n  // Base URL for API requests\n  baseUrl: process.env.NODE_ENV === 'production' \n    ? 'https://book-database-backend.onrender.com/api' \n    : 'http://localhost:10000/api',\n  \n  // Initialize the API service\n  init() {\n    // Check if we're in development mode\n    if (process.env.NODE_ENV !== 'production') {\n      console.log('API Service initialized in development mode');\n      console.log('API Base URL:', this.baseUrl);\n    }\n  },\n  \n  // Generic GET request\n  async get(endpoint) {\n    try {\n      const response = await fetch(`${this.baseUrl}/${endpoint}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API GET Error:', error);\n      throw error;\n    }\n  },\n  \n  // Generic POST request\n  async post(endpoint, data) {\n    try {\n      const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API POST Error:', error);\n      throw error;\n    }\n  },\n  \n  // Generic PUT request\n  async put(endpoint, data) {\n    try {\n      const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API PUT Error:', error);\n      throw error;\n    }\n  },\n  \n  // Generic DELETE request\n  async delete(endpoint) {\n    try {\n      const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n        method: 'DELETE'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API DELETE Error:', error);\n      throw error;\n    }\n  },\n  \n  // File upload with FormData\n  async uploadFile(endpoint, file, fileType) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n        method: 'POST',\n        body: formData\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API Upload Error:', error);\n      throw error;\n    }\n  },\n  \n  // Book-specific API methods\n  \n  // Get all books\n  async getBooks() {\n    return this.get('books');\n  },\n  \n  // Get a single book\n  async getBook(id) {\n    return this.get(`books/${id}`);\n  },\n  \n  // Create a new book\n  async createBook(book) {\n    return this.post('books', book);\n  },\n  \n  // Update a book\n  async updateBook(id, book) {\n    return this.put(`books/${id}`, book);\n  },\n  \n  // Delete a book\n  async deleteBook(id) {\n    return this.delete(`books/${id}`);\n  },\n  \n  // Update reading progress\n  async updateReadingProgress(id, progress) {\n    return this.put(`books/${id}/progress`, progress);\n  },\n  \n  // Reading Challenge API methods\n  \n  // Get all challenges\n  async getChallenges() {\n    return this.get('challenges');\n  },\n  \n  // Create a new challenge\n  async createChallenge(challenge) {\n    return this.post('challenges', challenge);\n  },\n  \n  // Update a challenge\n  async updateChallenge(year, challenge) {\n    return this.put(`challenges/${year}`, challenge);\n  },\n  \n  // Import/Export API methods\n  \n  // Import books from JSON\n  async importJson(file) {\n    return this.uploadFile('import/json', file);\n  },\n  \n  // Import books from CSV\n  async importCsv(file) {\n    return this.uploadFile('import/csv', file);\n  },\n  \n  // Export books to JSON\n  async exportJson() {\n    return this.get('export/json');\n  }\n};\n","// UI Service for handling UI-related operations\nexport const uiService = {\n  // Bootstrap modal instances\n  bookModal: null,\n  progressModal: null,\n  challengeModal: null,\n  \n  // Initialize the UI service\n  init() {\n    // Initialize Bootstrap modals\n    this.bookModal = new bootstrap.Modal(document.getElementById('book-modal'));\n    this.progressModal = new bootstrap.Modal(document.getElementById('progress-modal'));\n    this.challengeModal = new bootstrap.Modal(document.getElementById('challenge-modal'));\n  },\n  \n  // Show book modal for adding/editing a book\n  showBookModal(book = null) {\n    const modalTitle = document.getElementById('book-modal-label');\n    const bookForm = document.getElementById('book-form');\n    \n    // Reset form\n    bookForm.reset();\n    \n    if (book) {\n      // Edit existing book\n      modalTitle.textContent = 'Edit Book';\n      \n      // Fill form with book data\n      document.getElementById('book-id').value = book.bookId;\n      document.getElementById('title').value = book.title || '';\n      document.getElementById('author').value = book.author || '';\n      document.getElementById('additional-authors').value = book.additionalAuthors || '';\n      document.getElementById('isbn').value = book.isbn || '';\n      document.getElementById('isbn13').value = book.isbn13 || '';\n      document.getElementById('publisher').value = book.publisher || '';\n      document.getElementById('binding').value = book.binding || '';\n      document.getElementById('pages').value = book.pages || '';\n      document.getElementById('published').value = book.published || '';\n      document.getElementById('edition-published').value = book.editionPublished || '';\n      document.getElementById('exclusive-shelf').value = book.exclusiveShelf || 'to-read';\n      document.getElementById('bookshelves').value = book.bookshelves || '';\n      document.getElementById('rating').value = book.rating || '';\n      document.getElementById('my-review').value = book.myReview || '';\n    } else {\n      // Add new book\n      modalTitle.textContent = 'Add New Book';\n      document.getElementById('book-id').value = '';\n    }\n    \n    this.bookModal.show();\n  },\n  \n  // Show reading progress modal\n  showProgressModal(book) {\n    const bookTitle = document.getElementById('book-title');\n    const totalPages = document.getElementById('total-pages');\n    const currentPage = document.getElementById('current-page');\n    const percentComplete = document.getElementById('percent-complete');\n    const progressBookId = document.getElementById('progress-book-id');\n    \n    // Reset form\n    document.getElementById('progress-form').reset();\n    \n    // Fill form with book data\n    bookTitle.value = book.title;\n    totalPages.value = book.pages || 0;\n    \n    // Set current progress\n    if (book.readingProgress) {\n      currentPage.value = book.readingProgress.currentPage || 0;\n      percentComplete.value = book.readingProgress.percentComplete || 0;\n      document.getElementById('percent-display').textContent = `${book.readingProgress.percentComplete || 0}%`;\n    } else {\n      currentPage.value = 0;\n      percentComplete.value = 0;\n      document.getElementById('percent-display').textContent = '0%';\n    }\n    \n    // Set max value for current page\n    currentPage.max = book.pages || 100;\n    \n    // Set book ID\n    progressBookId.value = book.bookId;\n    \n    this.progressModal.show();\n  },\n  \n  // Show challenge modal\n  showChallengeModal(challenge = null) {\n    const modalTitle = document.getElementById('challenge-modal-label');\n    const challengeForm = document.getElementById('challenge-form');\n    \n    // Reset form\n    challengeForm.reset();\n    \n    if (challenge) {\n      // Edit existing challenge\n      modalTitle.textContent = 'Edit Reading Challenge';\n      \n      // Fill form with challenge data\n      document.getElementById('challenge-year').value = challenge.year;\n      document.getElementById('challenge-goal').value = challenge.goal;\n      \n      // Disable year field for existing challenges\n      document.getElementById('challenge-year').disabled = true;\n    } else {\n      // Add new challenge\n      modalTitle.textContent = 'New Reading Challenge';\n      \n      // Set default year to current year\n      const currentYear = new Date().getFullYear();\n      document.getElementById('challenge-year').value = currentYear;\n      \n      // Enable year field for new challenges\n      document.getElementById('challenge-year').disabled = false;\n    }\n    \n    this.challengeModal.show();\n  },\n  \n  // Update percent complete from current page\n  updatePercentFromPage() {\n    const currentPage = document.getElementById('current-page');\n    const totalPages = document.getElementById('total-pages');\n    const percentComplete = document.getElementById('percent-complete');\n    const percentDisplay = document.getElementById('percent-display');\n    \n    if (totalPages.value > 0) {\n      const percent = Math.round((currentPage.value / totalPages.value) * 100);\n      percentComplete.value = percent;\n      percentDisplay.textContent = `${percent}%`;\n    }\n  },\n  \n  // Update current page from percent complete\n  updatePageFromPercent() {\n    const currentPage = document.getElementById('current-page');\n    const totalPages = document.getElementById('total-pages');\n    const percentComplete = document.getElementById('percent-complete');\n    const percentDisplay = document.getElementById('percent-display');\n    \n    if (totalPages.value > 0) {\n      const page = Math.round((percentComplete.value / 100) * totalPages.value);\n      currentPage.value = page;\n      percentDisplay.textContent = `${percentComplete.value}%`;\n    }\n  },\n  \n  // Show toast notification\n  showToast(message, type = 'success') {\n    // Create toast container if it doesn't exist\n    let toastContainer = document.querySelector('.toast-container');\n    \n    if (!toastContainer) {\n      toastContainer = document.createElement('div');\n      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';\n      document.body.appendChild(toastContainer);\n    }\n    \n    // Create toast element\n    const toastEl = document.createElement('div');\n    toastEl.className = `toast align-items-center text-white bg-${type} border-0`;\n    toastEl.setAttribute('role', 'alert');\n    toastEl.setAttribute('aria-live', 'assertive');\n    toastEl.setAttribute('aria-atomic', 'true');\n    \n    // Create toast content\n    toastEl.innerHTML = `\n      <div class=\"d-flex\">\n        <div class=\"toast-body\">\n          ${message}\n        </div>\n        <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\" aria-label=\"Close\"></button>\n      </div>\n    `;\n    \n    // Add toast to container\n    toastContainer.appendChild(toastEl);\n    \n    // Initialize and show toast\n    const toast = new bootstrap.Toast(toastEl, { autohide: true, delay: 3000 });\n    toast.show();\n    \n    // Remove toast after it's hidden\n    toastEl.addEventListener('hidden.bs.toast', () => {\n      toastEl.remove();\n    });\n  },\n  \n  // Show confirmation dialog\n  showConfirmation(message, callback) {\n    if (confirm(message)) {\n      callback();\n    }\n  },\n  \n  // Render star rating\n  renderStarRating(rating) {\n    let stars = '';\n    \n    for (let i = 1; i <= 5; i++) {\n      if (i <= rating) {\n        stars += '<i class=\"bi bi-star-fill rating-star\"></i>';\n      } else {\n        stars += '<i class=\"bi bi-star rating-star\"></i>';\n      }\n    }\n    \n    return stars;\n  },\n  \n  // Format date string (YYYY/MM/DD to MM/DD/YYYY)\n  formatDate(dateString) {\n    if (!dateString) return '';\n    \n    const parts = dateString.split('/');\n    if (parts.length !== 3) return dateString;\n    \n    return `${parts[1]}/${parts[2]}/${parts[0]}`;\n  },\n  \n  // Get shelf badge HTML\n  getShelfBadge(shelf) {\n    let badgeClass = '';\n    let icon = '';\n    \n    switch (shelf) {\n      case 'read':\n        badgeClass = 'shelf-read';\n        icon = 'bi-check-circle';\n        break;\n      case 'currently-reading':\n        badgeClass = 'shelf-currently-reading';\n        icon = 'bi-bookmark';\n        break;\n      case 'to-read':\n        badgeClass = 'shelf-to-read';\n        icon = 'bi-hourglass';\n        break;\n      default:\n        badgeClass = 'bg-secondary text-white';\n        icon = 'bi-book';\n    }\n    \n    return `<span class=\"book-shelf ${badgeClass}\"><i class=\"bi ${icon} me-1\"></i>${this.formatShelfName(shelf)}</span>`;\n  },\n  \n  // Format shelf name for display\n  formatShelfName(shelf) {\n    switch (shelf) {\n      case 'read':\n        return 'Read';\n      case 'currently-reading':\n        return 'Currently Reading';\n      case 'to-read':\n        return 'To Read';\n      default:\n        return shelf;\n    }\n  },\n  \n  // Create pagination\n  createPagination(currentPage, totalPages, onPageChange) {\n    const pagination = document.getElementById('pagination');\n    pagination.innerHTML = '';\n    \n    if (totalPages <= 1) {\n      return;\n    }\n    \n    // Previous button\n    const prevLi = document.createElement('li');\n    prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;\n    \n    const prevLink = document.createElement('a');\n    prevLink.className = 'page-link';\n    prevLink.href = '#';\n    prevLink.setAttribute('aria-label', 'Previous');\n    prevLink.innerHTML = '<span aria-hidden=\"true\">&laquo;</span>';\n    \n    if (currentPage > 1) {\n      prevLink.addEventListener('click', (e) => {\n        e.preventDefault();\n        onPageChange(currentPage - 1);\n      });\n    }\n    \n    prevLi.appendChild(prevLink);\n    pagination.appendChild(prevLi);\n    \n    // Page numbers\n    const maxPages = 5;\n    let startPage = Math.max(1, currentPage - Math.floor(maxPages / 2));\n    let endPage = Math.min(totalPages, startPage + maxPages - 1);\n    \n    if (endPage - startPage + 1 < maxPages) {\n      startPage = Math.max(1, endPage - maxPages + 1);\n    }\n    \n    for (let i = startPage; i <= endPage; i++) {\n      const pageLi = document.createElement('li');\n      pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;\n      \n      const pageLink = document.createElement('a');\n      pageLink.className = 'page-link';\n      pageLink.href = '#';\n      pageLink.textContent = i;\n      \n      if (i !== currentPage) {\n        pageLink.addEventListener('click', (e) => {\n          e.preventDefault();\n          onPageChange(i);\n        });\n      }\n      \n      pageLi.appendChild(pageLink);\n      pagination.appendChild(pageLi);\n    }\n    \n    // Next button\n    const nextLi = document.createElement('li');\n    nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;\n    \n    const nextLink = document.createElement('a');\n    nextLink.className = 'page-link';\n    nextLink.href = '#';\n    nextLink.setAttribute('aria-label', 'Next');\n    nextLink.innerHTML = '<span aria-hidden=\"true\">&raquo;</span>';\n    \n    if (currentPage < totalPages) {\n      nextLink.addEventListener('click', (e) => {\n        e.preventDefault();\n        onPageChange(currentPage + 1);\n      });\n    }\n    \n    nextLi.appendChild(nextLink);\n    pagination.appendChild(nextLi);\n  }\n};\n","import { apiService } from './api.js';\nimport { uiService } from './ui.js';\n\n// Book Service for handling book-related operations\nexport const bookService = {\n  books: [],\n  filteredBooks: [],\n  currentPage: 1,\n  itemsPerPage: 10,\n  totalPages: 1,\n  currentFilter: 'all',\n  activeFilters: {\n    author: '',\n    genre: '',\n    rating: '',\n    readStatus: ''\n  },\n  \n  // Initialize the book service\n  init() {\n    // Set up event delegation for book actions\n    document.addEventListener('click', (e) => {\n      // Edit book button\n      if (e.target.closest('.edit-book-btn')) {\n        const bookId = e.target.closest('.edit-book-btn').getAttribute('data-id');\n        this.editBook(bookId);\n      }\n      \n      // Delete book button\n      if (e.target.closest('.delete-book-btn')) {\n        const bookId = e.target.closest('.delete-book-btn').getAttribute('data-id');\n        this.confirmDeleteBook(bookId);\n      }\n      \n      // Update progress button\n      if (e.target.closest('.progress-book-btn')) {\n        const bookId = e.target.closest('.progress-book-btn').getAttribute('data-id');\n        this.showProgressModal(bookId);\n      }\n    });\n    \n    // Set up event listeners for filter buttons\n    const applyFiltersBtn = document.getElementById('apply-filters-btn');\n    if (applyFiltersBtn) {\n      applyFiltersBtn.addEventListener('click', () => {\n        this.applyFilters();\n      });\n    }\n    \n    const clearFiltersBtn = document.getElementById('clear-filters-btn');\n    if (clearFiltersBtn) {\n      clearFiltersBtn.addEventListener('click', () => {\n        this.clearFilters();\n      });\n    }\n    \n    // Load initial data\n    this.loadBooks();\n  },\n  \n  // Load all books\n  async loadBooks(page = 1) {\n    try {\n      this.currentPage = page;\n      this.currentFilter = null;\n      \n      // Get books from API\n      const books = await apiService.getBooks();\n      this.books = books;\n      this.filteredBooks = books;\n      this.currentFilter = 'all';\n      this.currentPage = page;\n      \n      // Calculate total pages\n      this.totalPages = Math.ceil(books.length / this.itemsPerPage);\n      \n      // Render books table\n      this.renderBooksTable(books);\n      \n      // Create pagination\n      uiService.createPagination(page, this.totalPages, (page) => {\n        this.currentPage = page;\n        this.renderBooksTable(books);\n      });\n      \n      // Populate filter dropdowns\n      this.populateFilterOptions(books);\n      \n      // Reset page title\n      const pageTitle = document.getElementById('page-title');\n      pageTitle.textContent = 'All Books';\n    } catch (error) {\n      console.error('Error loading books:', error);\n      uiService.showToast('Error loading books', 'danger');\n    }\n  },\n  \n  // Load books by shelf\n  async loadShelf(shelf) {\n    try {\n      // Get all books from API\n      const books = await apiService.getBooks();\n      \n      // Filter books by shelf\n      const filteredBooks = books.filter(book => book.exclusiveShelf === shelf);\n      \n      // Store filtered books\n      this.books = books;\n      this.filteredBooks = filteredBooks;\n      this.currentFilter = shelf;\n      \n      // Render books in card view\n      this.renderBookCards(filteredBooks, shelf);\n    } catch (error) {\n      console.error(`Error loading ${shelf} books:`, error);\n      uiService.showToast(`Error loading ${shelf} books`, 'danger');\n    }\n  },\n  \n  // Load favorite books\n  async loadFavorites() {\n    try {\n      // Get all books from API\n      const books = await apiService.getBooks();\n      \n      // Filter books that have \"favorites\" in bookshelves\n      const filteredBooks = books.filter(book => \n        book.bookshelves && book.bookshelves.toLowerCase().includes('favorites')\n      );\n      \n      // Store filtered books\n      this.books = books;\n      this.filteredBooks = filteredBooks;\n      this.currentFilter = 'favorites';\n      \n      // Render books in card view\n      this.renderBookCards(filteredBooks, 'favorites');\n    } catch (error) {\n      console.error('Error loading favorite books:', error);\n      uiService.showToast('Error loading favorite books', 'danger');\n    }\n  },\n  \n  // Search books\n  async searchBooks(query) {\n    if (!query.trim()) {\n      this.loadBooks();\n      return;\n    }\n    \n    try {\n      // Get all books from API\n      const books = await apiService.getBooks();\n      \n      // Filter books by search query\n      const filteredBooks = books.filter(book => {\n        const searchFields = [\n          book.title || '',\n          book.author || '',\n          book.additionalAuthors || '',\n          book.publisher || '',\n          book.isbn || '',\n          book.isbn13 ? book.isbn13.toString() : ''\n        ];\n        \n        const searchText = searchFields.join(' ').toLowerCase();\n        return searchText.includes(query.toLowerCase());\n      });\n      \n      // Store filtered books\n      this.books = books;\n      this.filteredBooks = filteredBooks;\n      this.currentFilter = 'search';\n      this.currentPage = 1; // Reset to first page for search results\n      \n      // Calculate total pages\n      this.totalPages = Math.ceil(filteredBooks.length / this.itemsPerPage);\n      \n      // Render books table\n      this.renderBooksTable(filteredBooks);\n      \n      // Create pagination\n      uiService.createPagination(1, this.totalPages, (page) => {\n        this.currentPage = page;\n        this.renderBooksTable(filteredBooks);\n      });\n      \n      // Show search results message\n      const pageTitle = document.getElementById('page-title');\n      pageTitle.textContent = `Search Results: ${filteredBooks.length} books found`;\n      \n      // Make sure the books page is visible\n      document.querySelectorAll('.page-content').forEach(page => {\n        page.classList.add('d-none');\n      });\n      document.getElementById('books-page').classList.remove('d-none');\n      \n      // Log search results to console for debugging\n      console.log(`Search results for \"${query}\":`, filteredBooks);\n    } catch (error) {\n      console.error('Error searching books:', error);\n      uiService.showToast('Error searching books', 'danger');\n    }\n  },\n  \n  // Populate filter options\n  populateFilterOptions(books) {\n    // Get unique authors\n    const authors = [...new Set(books.map(book => book.author).filter(Boolean))].sort();\n    const authorSelect = document.getElementById('filter-author');\n    \n    // Clear existing options except the first one\n    while (authorSelect.options.length > 1) {\n      authorSelect.remove(1);\n    }\n    \n    // Add author options\n    authors.forEach(author => {\n      const option = document.createElement('option');\n      option.value = author;\n      option.textContent = author;\n      authorSelect.appendChild(option);\n    });\n    \n    // Get unique genres/bookshelves\n    const genres = [...new Set(books.map(book => book.bookshelves).filter(Boolean)\n      .flatMap(shelves => shelves.split(',').map(s => s.trim())))].sort();\n    const genreSelect = document.getElementById('filter-genre');\n    \n    // Clear existing options except the first one\n    while (genreSelect.options.length > 1) {\n      genreSelect.remove(1);\n    }\n    \n    // Add genre options\n    genres.forEach(genre => {\n      const option = document.createElement('option');\n      option.value = genre;\n      option.textContent = genre;\n      genreSelect.appendChild(option);\n    });\n  },\n  \n  // Apply filters\n  applyFilters() {\n    // Get filter values\n    const author = document.getElementById('filter-author').value;\n    const genre = document.getElementById('filter-genre').value;\n    const rating = document.getElementById('filter-rating').value;\n    const readStatus = document.getElementById('filter-read-status').value;\n    \n    // Store active filters\n    this.activeFilters = {\n      author,\n      genre,\n      rating,\n      readStatus\n    };\n    \n    // Filter books\n    let filteredBooks = this.books;\n    \n    // Filter by author\n    if (author) {\n      filteredBooks = filteredBooks.filter(book => book.author === author);\n    }\n    \n    // Filter by genre/bookshelf\n    if (genre) {\n      filteredBooks = filteredBooks.filter(book => {\n        const bookshelves = book.bookshelves || '';\n        return bookshelves.split(',').map(s => s.trim()).includes(genre);\n      });\n    }\n    \n    // Filter by rating\n    if (rating) {\n      const minRating = parseInt(rating);\n      filteredBooks = filteredBooks.filter(book => {\n        const bookRating = book.rating || 0;\n        return bookRating >= minRating;\n      });\n    }\n    \n    // Filter by read status\n    if (readStatus) {\n      filteredBooks = filteredBooks.filter(book => book.exclusiveShelf === readStatus);\n    }\n    \n    // Store filtered books\n    this.filteredBooks = filteredBooks;\n    this.currentFilter = 'filter';\n    this.currentPage = 1; // Reset to first page for filtered results\n    \n    // Calculate total pages\n    this.totalPages = Math.ceil(filteredBooks.length / this.itemsPerPage);\n    \n    // Render books table\n    this.renderBooksTable(filteredBooks);\n    \n    // Create pagination\n    uiService.createPagination(1, this.totalPages, (page) => {\n      this.currentPage = page;\n      this.renderBooksTable(filteredBooks);\n    });\n    \n    // Show filter results message\n    const pageTitle = document.getElementById('page-title');\n    pageTitle.textContent = `Filtered Results: ${filteredBooks.length} books found`;\n    \n    // Make sure the books page is visible\n    document.querySelectorAll('.page-content').forEach(page => {\n      page.classList.add('d-none');\n    });\n    document.getElementById('books-page').classList.remove('d-none');\n    \n    // Hide the filter modal\n    const filterModal = bootstrap.Modal.getInstance(document.getElementById('filter-modal'));\n    filterModal.hide();\n    \n    // Show applied filters summary\n    this.showFilterSummary();\n  },\n  \n  // Clear filters\n  clearFilters() {\n    // Reset filter form\n    document.getElementById('filter-form').reset();\n    \n    // Reset active filters\n    this.activeFilters = {\n      author: '',\n      genre: '',\n      rating: '',\n      readStatus: ''\n    };\n    \n    // Load all books\n    this.loadBooks();\n    \n    // Hide the filter modal\n    const filterModal = bootstrap.Modal.getInstance(document.getElementById('filter-modal'));\n    filterModal.hide();\n  },\n  \n  // Show filter summary\n  showFilterSummary() {\n    const { author, genre, rating, readStatus } = this.activeFilters;\n    \n    if (!author && !genre && !rating && !readStatus) {\n      return;\n    }\n    \n    let message = 'Filters applied: ';\n    const filters = [];\n    \n    if (author) filters.push(`Author: ${author}`);\n    if (genre) filters.push(`Genre: ${genre}`);\n    if (rating) filters.push(`${rating}+ Stars`);\n    if (readStatus) filters.push(`Status: ${uiService.formatShelfName(readStatus)}`);\n    \n    message += filters.join(', ');\n    \n    uiService.showToast(message, 'info');\n  },\n  \n  // Render books table\n  renderBooksTable(books) {\n    const tableBody = document.getElementById('books-table-body');\n    tableBody.innerHTML = '';\n    \n    // Calculate start and end indices for current page\n    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n    const endIndex = Math.min(startIndex + this.itemsPerPage, books.length);\n    \n    // Get books for current page\n    const booksForPage = books.slice(startIndex, endIndex);\n    \n    if (booksForPage.length === 0) {\n      tableBody.innerHTML = `\n        <tr>\n          <td colspan=\"6\" class=\"text-center\">No books found</td>\n        </tr>\n      `;\n      return;\n    }\n    \n    // Create table rows\n    booksForPage.forEach(book => {\n      const row = document.createElement('tr');\n      \n      // Book title\n      const titleCell = document.createElement('td');\n      titleCell.innerHTML = `<span class=\"book-title\">${book.title}</span>`;\n      row.appendChild(titleCell);\n      \n      // Author\n      const authorCell = document.createElement('td');\n      authorCell.innerHTML = `<span class=\"book-author\">${book.author}</span>`;\n      row.appendChild(authorCell);\n      \n      // Rating\n      const ratingCell = document.createElement('td');\n      ratingCell.innerHTML = `<div class=\"book-rating\">${uiService.renderStarRating(book.rating)}</div>`;\n      row.appendChild(ratingCell);\n      \n      // Shelf\n      const shelfCell = document.createElement('td');\n      shelfCell.innerHTML = uiService.getShelfBadge(book.exclusiveShelf);\n      row.appendChild(shelfCell);\n      \n      // Pages\n      const pagesCell = document.createElement('td');\n      pagesCell.textContent = book.pages || '-';\n      row.appendChild(pagesCell);\n      \n      // Actions\n      const actionsCell = document.createElement('td');\n      actionsCell.innerHTML = `\n        <div class=\"btn-group\" role=\"group\">\n          <button type=\"button\" class=\"btn btn-sm btn-outline-primary action-btn progress-book-btn\" data-id=\"${book.bookId}\" title=\"Update Progress\">\n            <i class=\"bi bi-bookmark\"></i>\n          </button>\n          <button type=\"button\" class=\"btn btn-sm btn-outline-secondary action-btn edit-book-btn\" data-id=\"${book.bookId}\" title=\"Edit\">\n            <i class=\"bi bi-pencil\"></i>\n          </button>\n          <button type=\"button\" class=\"btn btn-sm btn-outline-danger action-btn delete-book-btn\" data-id=\"${book.bookId}\" title=\"Delete\">\n            <i class=\"bi bi-trash\"></i>\n          </button>\n        </div>\n      `;\n      row.appendChild(actionsCell);\n      \n      tableBody.appendChild(row);\n    });\n  },\n  \n  // Render book cards\n  renderBookCards(books, container) {\n    const containerElement = document.getElementById(`${container}-books`);\n    containerElement.innerHTML = '';\n    \n    if (books.length === 0) {\n      containerElement.innerHTML = `\n        <div class=\"col-12 text-center my-5\">\n          <h5>No books found</h5>\n        </div>\n      `;\n      return;\n    }\n    \n    books.forEach(book => {\n      const card = document.createElement('div');\n      card.className = 'col-md-6 col-lg-4 col-xl-3 mb-4';\n      \n      // Reading progress HTML\n      let progressHtml = '';\n      if (book.exclusiveShelf === 'currently-reading' && book.readingProgress) {\n        const percent = book.readingProgress.percentComplete || 0;\n        const currentPage = book.readingProgress.currentPage || 0;\n        const totalPages = book.pages || 0;\n        \n        progressHtml = `\n          <div class=\"progress-container\">\n            <div class=\"progress\">\n              <div class=\"progress-bar bg-success\" role=\"progressbar\" style=\"width: ${percent}%\" \n                aria-valuenow=\"${percent}\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n            </div>\n            <div class=\"progress-info\">\n              <span>${currentPage} of ${totalPages} pages</span>\n              <span>${percent}% complete</span>\n            </div>\n          </div>\n        `;\n      }\n      \n      card.innerHTML = `\n        <div class=\"card book-card\">\n          <div class=\"card-img-top\">\n            <i class=\"bi bi-book\"></i>\n          </div>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">${book.title}</h5>\n            <p class=\"card-author\">${book.author}</p>\n            <div class=\"card-rating mb-2\">${uiService.renderStarRating(book.rating)}</div>\n            ${uiService.getShelfBadge(book.exclusiveShelf)}\n            ${progressHtml}\n            <div class=\"mt-3\">\n              <button type=\"button\" class=\"btn btn-sm btn-outline-primary progress-book-btn\" data-id=\"${book.bookId}\">\n                <i class=\"bi bi-bookmark me-1\"></i>Update Progress\n              </button>\n              <div class=\"btn-group mt-2\" role=\"group\">\n                <button type=\"button\" class=\"btn btn-sm btn-outline-secondary edit-book-btn\" data-id=\"${book.bookId}\">\n                  <i class=\"bi bi-pencil\"></i>\n                </button>\n                <button type=\"button\" class=\"btn btn-sm btn-outline-danger delete-book-btn\" data-id=\"${book.bookId}\">\n                  <i class=\"bi bi-trash\"></i>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n      \n      containerElement.appendChild(card);\n    });\n  },\n  \n  // Save book (create or update)\n  async saveBook() {\n    try {\n      // Get form data\n      const bookId = document.getElementById('book-id').value;\n      const title = document.getElementById('title').value;\n      const author = document.getElementById('author').value;\n      const additionalAuthors = document.getElementById('additional-authors').value;\n      const isbn = document.getElementById('isbn').value;\n      const isbn13 = document.getElementById('isbn13').value;\n      const publisher = document.getElementById('publisher').value;\n      const binding = document.getElementById('binding').value;\n      const pages = document.getElementById('pages').value;\n      const published = document.getElementById('published').value;\n      const editionPublished = document.getElementById('edition-published').value;\n      const exclusiveShelf = document.getElementById('exclusive-shelf').value;\n      const bookshelves = document.getElementById('bookshelves').value;\n      const rating = document.getElementById('rating').value;\n      const myReview = document.getElementById('my-review').value;\n      \n      // Create book object\n      const book = {\n        title,\n        author,\n        additionalAuthors,\n        isbn,\n        isbn13: isbn13 ? parseInt(isbn13) : null,\n        publisher,\n        binding,\n        pages: pages ? parseInt(pages) : null,\n        published: published ? parseInt(published) : null,\n        editionPublished: editionPublished ? parseInt(editionPublished) : null,\n        exclusiveShelf,\n        bookshelves,\n        rating: rating ? parseInt(rating) : null,\n        myReview,\n        dateAdded: new Date().toISOString().split('T')[0].replace(/-/g, '/')\n      };\n      \n      let result;\n      \n      if (bookId) {\n        // Update existing book\n        result = await apiService.updateBook(bookId, book);\n        uiService.showToast('Book updated successfully', 'success');\n      } else {\n        // Create new book\n        result = await apiService.createBook(book);\n        uiService.showToast('Book added successfully', 'success');\n      }\n      \n      // Hide modal\n      uiService.bookModal.hide();\n      \n      // Reload books\n      if (this.currentFilter) {\n        if (this.currentFilter === 'favorites') {\n          this.loadFavorites();\n        } else {\n          this.loadShelf(this.currentFilter);\n        }\n      } else {\n        this.loadBooks(this.currentPage);\n      }\n    } catch (error) {\n      console.error('Error saving book:', error);\n      uiService.showToast('Error saving book', 'danger');\n    }\n  },\n  \n  // Edit book\n  async editBook(bookId) {\n    try {\n      // Find book in current books array\n      const book = this.books.find(b => b.bookId == bookId);\n      \n      if (book) {\n        // Show book modal with book data\n        uiService.showBookModal(book);\n      } else {\n        // Fetch book from API\n        const book = await apiService.getBook(bookId);\n        uiService.showBookModal(book);\n      }\n    } catch (error) {\n      console.error('Error editing book:', error);\n      uiService.showToast('Error loading book details', 'danger');\n    }\n  },\n  \n  // Confirm delete book\n  confirmDeleteBook(bookId) {\n    uiService.showConfirmation('Are you sure you want to delete this book?', () => {\n      this.deleteBook(bookId);\n    });\n  },\n  \n  // Delete book\n  async deleteBook(bookId) {\n    try {\n      // Delete book from API\n      await apiService.deleteBook(bookId);\n      \n      // Show success message\n      uiService.showToast('Book deleted successfully', 'success');\n      \n      // Reload books\n      if (this.currentFilter) {\n        if (this.currentFilter === 'favorites') {\n          this.loadFavorites();\n        } else {\n          this.loadShelf(this.currentFilter);\n        }\n      } else {\n        this.loadBooks(this.currentPage);\n      }\n    } catch (error) {\n      console.error('Error deleting book:', error);\n      uiService.showToast('Error deleting book', 'danger');\n    }\n  },\n  \n  // Show progress modal\n  async showProgressModal(bookId) {\n    try {\n      // Find book in current books array\n      let book = this.books.find(b => b.bookId == bookId);\n      \n      if (!book) {\n        // Fetch book from API\n        book = await apiService.getBook(bookId);\n      }\n      \n      if (book) {\n        // Show progress modal with book data\n        uiService.showProgressModal(book);\n      }\n    } catch (error) {\n      console.error('Error showing progress modal:', error);\n      uiService.showToast('Error loading book details', 'danger');\n    }\n  },\n  \n  // Save reading progress\n  async saveReadingProgress() {\n    try {\n      // Get form data\n      const bookId = document.getElementById('progress-book-id').value;\n      const currentPage = parseInt(document.getElementById('current-page').value);\n      const percentComplete = parseInt(document.getElementById('percent-complete').value);\n      \n      // Update reading progress\n      const progress = {\n        currentPage,\n        percentComplete\n      };\n      \n      await apiService.updateReadingProgress(bookId, progress);\n      \n      // Show success message\n      uiService.showToast('Reading progress updated', 'success');\n      \n      // Hide modal\n      uiService.progressModal.hide();\n      \n      // Reload books\n      if (this.currentFilter) {\n        if (this.currentFilter === 'favorites') {\n          this.loadFavorites();\n        } else {\n          this.loadShelf(this.currentFilter);\n        }\n      } else {\n        this.loadBooks(this.currentPage);\n      }\n    } catch (error) {\n      console.error('Error saving reading progress:', error);\n      uiService.showToast('Error updating reading progress', 'danger');\n    }\n  }\n};\n","import { apiService } from './api.js';\nimport { uiService } from './ui.js';\n\n// Challenge Service for handling reading challenge operations\nexport const challengeService = {\n  challenges: [],\n  \n  // Initialize the challenge service\n  init() {\n    // Nothing specific to initialize\n  },\n  \n  // Load all reading challenges\n  async loadChallenges() {\n    try {\n      // Get challenges from API\n      const challenges = await apiService.getChallenges();\n      this.challenges = challenges;\n      \n      // Render challenges\n      this.renderChallenges(challenges);\n      \n      // Create reading progress chart\n      this.createReadingProgressChart(challenges);\n    } catch (error) {\n      console.error('Error loading challenges:', error);\n      uiService.showToast('Error loading reading challenges', 'danger');\n    }\n  },\n  \n  // Render challenges\n  renderChallenges(challenges) {\n    // Render current year challenge\n    this.renderCurrentChallenge(challenges);\n    \n    // Render past challenges\n    this.renderPastChallenges(challenges);\n  },\n  \n  // Render current year challenge\n  renderCurrentChallenge(challenges) {\n    const currentYear = new Date().getFullYear();\n    const currentChallenge = challenges.find(c => c.year === currentYear);\n    \n    const currentChallengeElement = document.getElementById('current-challenge');\n    \n    if (!currentChallenge) {\n      currentChallengeElement.innerHTML = `\n        <div class=\"text-center py-4\">\n          <p>No reading challenge set for ${currentYear}</p>\n          <button class=\"btn btn-primary\" id=\"new-challenge-btn\">\n            <i class=\"bi bi-plus-lg me-2\"></i>Set a Reading Goal\n          </button>\n        </div>\n      `;\n      \n      // Add event listener to new challenge button\n      const newChallengeBtn = document.getElementById('new-challenge-btn');\n      newChallengeBtn.addEventListener('click', () => {\n        uiService.showChallengeModal();\n      });\n      \n      return;\n    }\n    \n    // Calculate progress percentage\n    const progressPercent = Math.min(100, Math.round((currentChallenge.completed / currentChallenge.goal) * 100));\n    \n    // Determine progress bar color\n    let progressColor = 'bg-success';\n    if (progressPercent < 25) {\n      progressColor = 'bg-danger';\n    } else if (progressPercent < 50) {\n      progressColor = 'bg-warning';\n    } else if (progressPercent < 75) {\n      progressColor = 'bg-info';\n    }\n    \n    currentChallengeElement.innerHTML = `\n      <div class=\"challenge-card\">\n        <h2 class=\"text-center mb-3\">${currentYear} Reading Challenge</h2>\n        <div class=\"text-center mb-4\">\n          <h3>\n            <span class=\"badge ${progressPercent >= 100 ? 'bg-success' : 'bg-primary'}\">\n              ${currentChallenge.completed} of ${currentChallenge.goal} books\n            </span>\n          </h3>\n        </div>\n        <div class=\"progress challenge-progress\">\n          <div class=\"progress-bar ${progressColor}\" role=\"progressbar\" \n            style=\"width: ${progressPercent}%\" \n            aria-valuenow=\"${progressPercent}\" \n            aria-valuemin=\"0\" \n            aria-valuemax=\"100\">\n            ${progressPercent}%\n          </div>\n        </div>\n        <div class=\"challenge-info\">\n          <span>Started: ${new Date(currentChallenge.createdAt).toLocaleDateString()}</span>\n          <span>${currentChallenge.goal - currentChallenge.completed} books to go</span>\n        </div>\n        <div class=\"text-center mt-4\">\n          <button class=\"btn btn-outline-primary edit-challenge-btn\" data-year=\"${currentChallenge.year}\">\n            <i class=\"bi bi-pencil me-2\"></i>Edit Challenge\n          </button>\n        </div>\n      </div>\n    `;\n    \n    // Add event listener to edit challenge button\n    const editChallengeBtn = document.querySelector('.edit-challenge-btn');\n    editChallengeBtn.addEventListener('click', () => {\n      this.editChallenge(currentChallenge.year);\n    });\n  },\n  \n  // Render past challenges\n  renderPastChallenges(challenges) {\n    const currentYear = new Date().getFullYear();\n    const pastChallenges = challenges.filter(c => c.year !== currentYear).sort((a, b) => b.year - a.year);\n    \n    const pastChallengesElement = document.getElementById('past-challenges');\n    \n    if (pastChallenges.length === 0) {\n      pastChallengesElement.innerHTML = `\n        <tr>\n          <td colspan=\"4\" class=\"text-center\">No past reading challenges</td>\n        </tr>\n      `;\n      return;\n    }\n    \n    pastChallengesElement.innerHTML = '';\n    \n    pastChallenges.forEach(challenge => {\n      // Calculate progress percentage\n      const progressPercent = Math.min(100, Math.round((challenge.completed / challenge.goal) * 100));\n      \n      // Determine progress bar color\n      let progressColor = 'bg-success';\n      if (progressPercent < 25) {\n        progressColor = 'bg-danger';\n      } else if (progressPercent < 50) {\n        progressColor = 'bg-warning';\n      } else if (progressPercent < 75) {\n        progressColor = 'bg-info';\n      }\n      \n      const row = document.createElement('tr');\n      \n      row.innerHTML = `\n        <td>${challenge.year}</td>\n        <td>${challenge.goal}</td>\n        <td>${challenge.completed}</td>\n        <td>\n          <div class=\"progress\">\n            <div class=\"progress-bar ${progressColor}\" role=\"progressbar\" \n              style=\"width: ${progressPercent}%\" \n              aria-valuenow=\"${progressPercent}\" \n              aria-valuemin=\"0\" \n              aria-valuemax=\"100\">\n              ${progressPercent}%\n            </div>\n          </div>\n        </td>\n      `;\n      \n      pastChallengesElement.appendChild(row);\n    });\n  },\n  \n  // Create reading progress chart\n  createReadingProgressChart(challenges) {\n    const currentYear = new Date().getFullYear();\n    const currentChallenge = challenges.find(c => c.year === currentYear);\n    \n    if (!currentChallenge) {\n      return;\n    }\n    \n    const ctx = document.getElementById('reading-progress-chart').getContext('2d');\n    \n    // Get monthly data (this would normally come from the API)\n    // For now, we'll create mock data\n    const monthlyData = this.generateMonthlyData(currentChallenge.completed);\n    \n    // Calculate target line (goal divided by 12 months, cumulative)\n    const targetLine = Array(12).fill(0).map((_, i) => {\n      return Math.round(((i + 1) / 12) * currentChallenge.goal);\n    });\n    \n    // Create chart\n    new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        datasets: [\n          {\n            label: 'Books Read',\n            data: monthlyData.cumulative,\n            backgroundColor: 'rgba(0, 123, 255, 0.1)',\n            borderColor: 'rgba(0, 123, 255, 1)',\n            borderWidth: 2,\n            fill: true,\n            tension: 0.4\n          },\n          {\n            label: 'Target',\n            data: targetLine,\n            borderColor: 'rgba(220, 53, 69, 0.5)',\n            borderWidth: 2,\n            borderDash: [5, 5],\n            fill: false,\n            pointRadius: 0\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            ticks: {\n              precision: 0\n            }\n          }\n        },\n        plugins: {\n          tooltip: {\n            callbacks: {\n              label: function(context) {\n                const label = context.dataset.label || '';\n                const value = context.parsed.y;\n                return `${label}: ${value} books`;\n              }\n            }\n          }\n        }\n      }\n    });\n  },\n  \n  // Generate monthly reading data (mock data)\n  generateMonthlyData(totalBooks) {\n    const currentMonth = new Date().getMonth();\n    \n    // Generate random monthly counts that sum to totalBooks\n    const monthlyCount = Array(12).fill(0);\n    \n    // Only fill months up to current month\n    let remaining = totalBooks;\n    for (let i = 0; i <= currentMonth; i++) {\n      if (i === currentMonth) {\n        monthlyCount[i] = remaining;\n      } else {\n        const count = Math.floor(Math.random() * (remaining / 2)) + 1;\n        monthlyCount[i] = Math.min(count, remaining);\n        remaining -= monthlyCount[i];\n      }\n      \n      if (remaining <= 0) break;\n    }\n    \n    // Calculate cumulative counts\n    const cumulativeCount = [];\n    let sum = 0;\n    \n    for (let i = 0; i < 12; i++) {\n      sum += monthlyCount[i];\n      cumulativeCount.push(sum);\n    }\n    \n    return {\n      monthly: monthlyCount,\n      cumulative: cumulativeCount\n    };\n  },\n  \n  // Save challenge\n  async saveChallenge() {\n    try {\n      // Get form data\n      const year = parseInt(document.getElementById('challenge-year').value);\n      const goal = parseInt(document.getElementById('challenge-goal').value);\n      \n      if (!year || !goal) {\n        uiService.showToast('Please fill in all fields', 'warning');\n        return;\n      }\n      \n      // Check if challenge for this year already exists\n      const existingChallenge = this.challenges.find(c => c.year === year);\n      \n      if (existingChallenge) {\n        // Update existing challenge\n        await apiService.updateChallenge(year, { goal, completed: existingChallenge.completed });\n        uiService.showToast('Reading challenge updated', 'success');\n      } else {\n        // Create new challenge\n        await apiService.createChallenge({ year, goal });\n        uiService.showToast('Reading challenge created', 'success');\n      }\n      \n      // Hide modal\n      uiService.challengeModal.hide();\n      \n      // Reload challenges\n      this.loadChallenges();\n    } catch (error) {\n      console.error('Error saving challenge:', error);\n      uiService.showToast('Error saving reading challenge', 'danger');\n    }\n  },\n  \n  // Edit challenge\n  editChallenge(year) {\n    const challenge = this.challenges.find(c => c.year === year);\n    \n    if (challenge) {\n      uiService.showChallengeModal(challenge);\n    }\n  }\n};\n","import { apiService } from './api.js';\nimport { uiService } from './ui.js';\nimport { bookService } from './book-service.js';\n\n// Import/Export Service for handling file operations\nexport const importExportService = {\n  // Initialize the import/export service\n  init() {\n    // Nothing specific to initialize\n  },\n  \n  // Import books from file\n  async importBooks() {\n    try {\n      const fileInput = document.getElementById('import-file');\n      \n      if (!fileInput.files || fileInput.files.length === 0) {\n        uiService.showToast('Please select a file to import', 'warning');\n        return;\n      }\n      \n      const file = fileInput.files[0];\n      const fileType = this.getFileType(file.name);\n      \n      if (!fileType) {\n        uiService.showToast('Unsupported file format. Please use JSON or CSV files.', 'warning');\n        return;\n      }\n      \n      // Show loading message\n      uiService.showToast('Importing books, please wait...', 'info');\n      \n      let result;\n      \n      if (fileType === 'json') {\n        result = await apiService.importJson(file);\n      } else if (fileType === 'csv') {\n        result = await apiService.importCsv(file);\n      }\n      \n      // Show success message\n      uiService.showToast(result.message, 'success');\n      \n      // Reset file input\n      fileInput.value = '';\n      \n      // Reload books\n      bookService.loadBooks();\n    } catch (error) {\n      console.error('Error importing books:', error);\n      uiService.showToast('Error importing books', 'danger');\n    }\n  },\n  \n  // Export books to file\n  async exportBooks(format) {\n    try {\n      // Show loading message\n      uiService.showToast(`Preparing ${format.toUpperCase()} export...`, 'info');\n      \n      // Get books from API\n      const books = await apiService.exportJson();\n      \n      if (format === 'json') {\n        this.exportJson(books);\n      } else if (format === 'csv') {\n        this.exportCsv(books);\n      }\n    } catch (error) {\n      console.error('Error exporting books:', error);\n      uiService.showToast('Error exporting books', 'danger');\n    }\n  },\n  \n  // Export books to JSON file\n  exportJson(books) {\n    const jsonString = JSON.stringify(books, null, 2);\n    const blob = new Blob([jsonString], { type: 'application/json' });\n    \n    // Generate filename with current date\n    const date = new Date().toISOString().split('T')[0];\n    const filename = `book_export_${date}.json`;\n    \n    // Save file\n    saveAs(blob, filename);\n    \n    // Show success message\n    uiService.showToast('Books exported to JSON successfully', 'success');\n  },\n  \n  // Export books to CSV file\n  exportCsv(books) {\n    // Get all possible headers from books\n    const headers = this.getAllHeaders(books);\n    \n    // Create CSV content\n    let csvContent = headers.join(',') + '\\\\n';\n    \n    books.forEach(book => {\n      const row = headers.map(header => {\n        const value = book[this.camelCase(header)];\n        \n        // Handle different value types\n        if (value === null || value === undefined) {\n          return '';\n        } else if (typeof value === 'string') {\n          // Escape quotes and wrap in quotes\n          return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n        } else if (Array.isArray(value)) {\n          return '\"' + JSON.stringify(value).replace(/\"/g, '\"\"') + '\"';\n        } else {\n          return value;\n        }\n      });\n      \n      csvContent += row.join(',') + '\\\\n';\n    });\n    \n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });\n    \n    // Generate filename with current date\n    const date = new Date().toISOString().split('T')[0];\n    const filename = `book_export_${date}.csv`;\n    \n    // Save file\n    saveAs(blob, filename);\n    \n    // Show success message\n    uiService.showToast('Books exported to CSV successfully', 'success');\n  },\n  \n  // Get file type from filename\n  getFileType(filename) {\n    const extension = filename.split('.').pop().toLowerCase();\n    \n    if (extension === 'json') {\n      return 'json';\n    } else if (extension === 'csv') {\n      return 'csv';\n    }\n    \n    return null;\n  },\n  \n  // Get all headers from books\n  getAllHeaders(books) {\n    const headers = new Set();\n    \n    // Original headers from the Goodreads export\n    const originalHeaders = [\n      'Book Id',\n      'Title',\n      'Author',\n      'Author (By Last Name)',\n      'Additional Authors',\n      'ISBN',\n      'ISBN13',\n      'Rating',\n      'Average Rating',\n      'Publisher',\n      'Binding',\n      'Pages',\n      'BEq',\n      'Edition Published',\n      'Published',\n      'Date Read',\n      'Date Added',\n      'Bookshelves',\n      'Bookshelves with positions',\n      'Exclusive Shelf',\n      'My Review',\n      'Spoiler',\n      'Private Notes',\n      'Read Count',\n      'Owned Copies'\n    ];\n    \n    // Add original headers\n    originalHeaders.forEach(header => headers.add(header));\n    \n    return Array.from(headers);\n  },\n  \n  // Convert header to camelCase\n  camelCase(header) {\n    // Special case for 'Book Id'\n    if (header === 'Book Id') return 'bookId';\n    \n    // Special case for 'Author (By Last Name)'\n    if (header === 'Author (By Last Name)') return 'authorByLastName';\n    \n    // Special case for 'BEq'\n    if (header === 'BEq') return 'beq';\n    \n    // Special case for 'ISBN'\n    if (header === 'ISBN') return 'isbn';\n    \n    // Special case for 'ISBN13'\n    if (header === 'ISBN13') return 'isbn13';\n    \n    // Special case for 'Bookshelves with positions'\n    if (header === 'Bookshelves with positions') return 'bookshelvesWithPositions';\n    \n    // Special case for 'Exclusive Shelf'\n    if (header === 'Exclusive Shelf') return 'exclusiveShelf';\n    \n    // Special case for 'My Review'\n    if (header === 'My Review') return 'myReview';\n    \n    // Special case for 'Read Count'\n    if (header === 'Read Count') return 'readCount';\n    \n    // Special case for 'Owned Copies'\n    if (header === 'Owned Copies') return 'ownedCopies';\n    \n    // Special case for 'Edition Published'\n    if (header === 'Edition Published') return 'editionPublished';\n    \n    // Special case for 'Date Read'\n    if (header === 'Date Read') return 'dateRead';\n    \n    // Special case for 'Date Added'\n    if (header === 'Date Added') return 'dateAdded';\n    \n    // Special case for 'Private Notes'\n    if (header === 'Private Notes') return 'privateNotes';\n    \n    // Special case for 'Average Rating'\n    if (header === 'Average Rating') return 'averageRating';\n    \n    // General case\n    return header.toLowerCase().replace(/\\s(.)/g, (_, char) => char.toUpperCase());\n  }\n};\n"],"names":["$96e14f2a7c3555e4$export$d0204b1ddc8ee140","baseUrl","init","get","endpoint","response","fetch","ok","Error","status","json","error","console","post","data","method","headers","body","JSON","stringify","put","delete","uploadFile","file","fileType","formData","FormData","append","getBooks","getBook","id","createBook","book","updateBook","deleteBook","updateReadingProgress","progress","getChallenges","createChallenge","challenge","updateChallenge","year","importJson","importCsv","exportJson","$84923368ea4a1ab4$export$4e73d36b0bd075d1","bookModal","progressModal","challengeModal","bootstrap","Modal","document","getElementById","showBookModal","modalTitle","bookForm","reset","textContent","value","bookId","title","author","additionalAuthors","isbn","isbn13","publisher","binding","pages","published","editionPublished","exclusiveShelf","bookshelves","rating","myReview","show","showProgressModal","bookTitle","totalPages","currentPage","percentComplete","progressBookId","readingProgress","max","showChallengeModal","challengeForm","goal","disabled","currentYear","Date","getFullYear","updatePercentFromPage","percentDisplay","percent","Math","round","updatePageFromPercent","showToast","message","type","toastContainer","querySelector","createElement","className","appendChild","toastEl","setAttribute","innerHTML","toast","Toast","autohide","delay","addEventListener","remove","showConfirmation","callback","confirm","renderStarRating","stars","i","formatDate","dateString","parts","split","length","getShelfBadge","shelf","badgeClass","icon","formatShelfName","createPagination","onPageChange","pagination","prevLi","prevLink","href","e","preventDefault","startPage","floor","maxPages","endPage","min","pageLi","pageLink","nextLi","nextLink","$4a002fcb399d90c3$export$61e002c222a9118b","books","filteredBooks","itemsPerPage","currentFilter","activeFilters","genre","readStatus","target","closest","getAttribute","editBook","confirmDeleteBook","applyFiltersBtn","applyFilters","clearFiltersBtn","clearFilters","loadBooks","page","ceil","renderBooksTable","populateFilterOptions","pageTitle","loadShelf","filter","renderBookCards","loadFavorites","toLowerCase","includes","searchBooks","query","trim","searchText","searchFields","toString","join","querySelectorAll","forEach","classList","add","log","authors","Set","map","Boolean","sort","authorSelect","options","option","genres","flatMap","shelves","s","genreSelect","minRating","parseInt","bookRating","filterModal","getInstance","hide","showFilterSummary","filters","push","tableBody","startIndex","endIndex","booksForPage","slice","row","titleCell","authorCell","ratingCell","shelfCell","pagesCell","actionsCell","container","containerElement","card","progressHtml","saveBook","dateAdded","toISOString","replace","find","b","saveReadingProgress","$63bdc4fa2e3cda72$export$8100295413ef12b3","challenges","loadChallenges","renderChallenges","createReadingProgressChart","renderCurrentChallenge","renderPastChallenges","currentChallenge","c","currentChallengeElement","newChallengeBtn","progressPercent","completed","progressColor","createdAt","toLocaleDateString","editChallengeBtn","editChallenge","pastChallenges","a","pastChallengesElement","ctx","getContext","monthlyData","generateMonthlyData","targetLine","Array","fill","_","Chart","labels","datasets","label","cumulative","backgroundColor","borderColor","borderWidth","tension","borderDash","pointRadius","responsive","maintainAspectRatio","scales","y","beginAtZero","ticks","precision","plugins","tooltip","callbacks","context","dataset","parsed","totalBooks","currentMonth","getMonth","monthlyCount","remaining","count","random","cumulativeCount","sum","monthly","saveChallenge","existingChallenge","$f86e092a81110eda$export$eaeb1ac5e2018f39","importBooks","result","fileInput","files","getFileType","name","exportBooks","format","toUpperCase","exportCsv","blob","Blob","date","saveAs","getAllHeaders","csvContent","header","camelCase","isArray","filename","extension","pop","originalHeaders","from","char","$2b6e161c9edcf319$var$setupNavigation","navLinks","link","l","p","selectedPage","$2b6e161c9edcf319$var$setupEventListeners","addBookBtn","saveBookBtn","searchButton","searchInput","key","saveChallengeBtn","saveProgressBtn","currentPageInput","importForm","exportJsonBtn","exportCsvBtn"],"version":3,"file":"index.f605556f.js.map"}